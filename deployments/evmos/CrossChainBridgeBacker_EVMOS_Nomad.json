{
  "address": "0xFbD5ED7244842696a60424e347109F8E42be46E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cross_chain_oracle_address",
          "type": "address"
        },
        {
          "internalType": "address[5]",
          "name": "_token_addresses",
          "type": "address[5]"
        },
        {
          "internalType": "address[3]",
          "name": "_bridge_addresses",
          "type": "address[3]"
        },
        {
          "internalType": "address",
          "name": "_destination_address_override",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_non_evm_destination_address",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "amo_address",
          "type": "address"
        }
      ],
      "name": "AMOAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "amo_address",
          "type": "address"
        }
      ],
      "name": "AMORemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "frax_bridge_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fxs_bridge_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral_bridge_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination_address_override",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "non_evm_destination_address",
          "type": "string"
        }
      ],
      "name": "BridgeInfoChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredERC20",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amo_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "is_eoa",
          "type": "bool"
        }
      ],
      "name": "addAMO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allAMOAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allAMOsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "frax_ttl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fxs_ttl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "col_ttl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ttl_val_usd_e18",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amos",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "amos_array",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anyFRAX",
      "outputs": [
        {
          "internalType": "contract IAnyswapV4ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anyFXS",
      "outputs": [
        {
          "internalType": "contract IAnyswapV4ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bridge_addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "frax_amount",
          "type": "uint256"
        }
      ],
      "name": "burnCanonicalFrax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fxs_amount",
          "type": "uint256"
        }
      ],
      "name": "burnCanonicalFxs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canFRAX",
      "outputs": [
        {
          "internalType": "contract CrossChainCanonical",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canFXS",
      "outputs": [
        {
          "internalType": "contract CrossChainCanonical",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collat_bridged_back_sum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collat_lent_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collat_lent_sum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral_token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_type",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bridge_token_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "name": "collectBridgeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cross_chain_oracle",
      "outputs": [
        {
          "internalType": "contract ICrossChainOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination_address_override",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eoa_amos",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frax_bridged_back_sum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "frax_lent_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frax_lent_sum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxs_bridged_back_sum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fxs_lent_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxs_lent_sum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        }
      ],
      "name": "getTokenType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "name": "giveAnyToCan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination_amo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collat_amount",
          "type": "uint256"
        }
      ],
      "name": "lendCollatToAMO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination_amo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "frax_amount",
          "type": "uint256"
        }
      ],
      "name": "lendFraxToAMO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination_amo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fxs_amount",
          "type": "uint256"
        }
      ],
      "name": "lendFxsToAMO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "frax_amount",
          "type": "uint256"
        }
      ],
      "name": "mintCanonicalFrax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fxs_amount",
          "type": "uint256"
        }
      ],
      "name": "mintCanonicalFxs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "missing_decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "non_evm_destination_address",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "canonical_token_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "do_bridging",
          "type": "bool"
        }
      ],
      "name": "receiveBackViaAMO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amo_address",
          "type": "address"
        }
      ],
      "name": "removeAMO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "do_swap",
          "type": "bool"
        }
      ],
      "name": "selfBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_frax_bridge_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxs_bridge_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral_bridge_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_destination_address_override",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_non_evm_destination_address",
          "type": "string"
        }
      ],
      "name": "setBridgeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        }
      ],
      "name": "setDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new_cc_oracle_address",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        }
      ],
      "name": "setRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showAllocations",
      "outputs": [
        {
          "internalType": "uint256[12]",
          "name": "allocations",
          "type": "uint256[12]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "tkn_bals",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "name": "swapAnyForCanonical",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "name": "swapCanonicalForAny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f74f8407011f4ab1f6ae58343b8592653682413dcdc76a4c9b513d6e914945b",
  "receipt": {
    "to": null,
    "from": "0x29fAF425F898F1af8fbA07654C83CD9D19f8e270",
    "contractAddress": "0xFbD5ED7244842696a60424e347109F8E42be46E0",
    "transactionIndex": 66,
    "gasUsed": "4709060",
    "logsBloom": "0x
    "blockHash": "0x2e5cbdae77eba7849e22b68ff8d794b3a99e0833e69e322aada42f8fd88bd6f7",
    "transactionHash": "0x7f74f8407011f4ab1f6ae58343b8592653682413dcdc76a4c9b513d6e914945b",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 94195,
        "transactionHash": "0x7f74f8407011f4ab1f6ae58343b8592653682413dcdc76a4c9b513d6e914945b",
        "address": "0xFbD5ED7244842696a60424e347109F8E42be46E0",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029faf425f898f1af8fba07654c83cd9d19f8e270",
        "logIndex": 72,
        "blockHash": "0x2e5cbdae77eba7849e22b68ff8d794b3a99e0833e69e322aada42f8fd88bd6f7"
      }
    ],
    "blockNumber": 94195,
    "cumulativeGasUsed": "14616130",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x29fAF425F898F1af8fbA07654C83CD9D19f8e270",
    "0x8412ebf45bAC1B340BbE8F318b928C466c4E39CA",
    "0x7a6DF5e183f4DA46a323c525b32f226d24dBa08F",
    [
      "0x28eC4B29657959F4A5052B41079fe32919Ec3Bd3",
      "0xE03494D0033687543a80c9B1ca7D6237F2EA8BD8",
      "0xd0ec216A38F199B0229AE668a96c3Cd9F9f118A6",
      "0xd8176865DD0D672c6Ab4A427572f80A72b4B4A9C",
      "0x51e44FfaD5C2B122C8b635671FCC8139dc636E82"
    ],
    [
      "0x28eC4B29657959F4A5052B41079fe32919Ec3Bd3",
      "0xd0ec216A38F199B0229AE668a96c3Cd9F9f118A6",
      "0x51e44FfaD5C2B122C8b635671FCC8139dc636E82"
    ],
    "0x0000000000000000000000000000000000000000",
    "",
    "FRAX Evmos Nomad CrossChainBridgeBacker"
  ],
  "numDeployments": 1,
  "solcInputHash": "43943d695133a0e6762aaebf4d257721",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cross_chain_oracle_address\",\"type\":\"address\"},{\"internalType\":\"address[5]\",\"name\":\"_token_addresses\",\"type\":\"address[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_bridge_addresses\",\"type\":\"address[3]\"},{\"internalType\":\"address\",\"name\":\"_destination_address_override\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_non_evm_destination_address\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"}],\"name\":\"AMOAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"}],\"name\":\"AMORemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"frax_bridge_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fxs_bridge_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral_bridge_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address_override\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"non_evm_destination_address\",\"type\":\"string\"}],\"name\":\"BridgeInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"is_eoa\",\"type\":\"bool\"}],\"name\":\"addAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAMOAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAMOsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_ttl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fxs_ttl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_ttl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ttl_val_usd_e18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amos_array\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyFRAX\",\"outputs\":[{\"internalType\":\"contract IAnyswapV4ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyFXS\",\"outputs\":[{\"internalType\":\"contract IAnyswapV4ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridge_addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"burnCanonicalFrax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fxs_amount\",\"type\":\"uint256\"}],\"name\":\"burnCanonicalFxs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canFRAX\",\"outputs\":[{\"internalType\":\"contract CrossChainCanonical\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canFXS\",\"outputs\":[{\"internalType\":\"contract CrossChainCanonical\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collat_bridged_back_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collat_lent_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collat_lent_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral_token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridge_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"collectBridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cross_chain_oracle\",\"outputs\":[{\"internalType\":\"contract ICrossChainOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination_address_override\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eoa_amos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_bridged_back_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frax_lent_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_lent_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxs_bridged_back_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fxs_lent_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxs_lent_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"giveAnyToCan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_amo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collat_amount\",\"type\":\"uint256\"}],\"name\":\"lendCollatToAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_amo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"lendFraxToAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_amo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fxs_amount\",\"type\":\"uint256\"}],\"name\":\"lendFxsToAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"mintCanonicalFrax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fxs_amount\",\"type\":\"uint256\"}],\"name\":\"mintCanonicalFxs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"missing_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"non_evm_destination_address\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"canonical_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"do_bridging\",\"type\":\"bool\"}],\"name\":\"receiveBackViaAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amo_address\",\"type\":\"address\"}],\"name\":\"removeAMO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"do_swap\",\"type\":\"bool\"}],\"name\":\"selfBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frax_bridge_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxs_bridge_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral_bridge_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination_address_override\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_non_evm_destination_address\",\"type\":\"string\"}],\"name\":\"setBridgeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"}],\"name\":\"setDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_cc_oracle_address\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAllocations\",\"outputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"allocations\",\"type\":\"uint256[12]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"tkn_bals\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"swapAnyForCanonical\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"swapCanonicalForAny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol\":\"CrossChainBridgeBacker_EVMOS_Nomad\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Math {\\n    \\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n    \\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n    \\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\ninterface IAnyswapV4ERC20 {\\n  function DOMAIN_SEPARATOR() external view returns(bytes32);\\n  function PERMIT_TYPEHASH() external view returns(bytes32);\\n  function Swapin(bytes32 txhash, address account, uint256 amount) external returns(bool);\\n  function Swapout(uint256 amount, address bindaddr) external returns(bool);\\n  function TRANSFER_TYPEHASH() external view returns(bytes32);\\n  function allowance(address, address) external view returns(uint256);\\n  function applyMinter() external;\\n  function applyVault() external;\\n  function approve(address spender, uint256 value) external returns(bool);\\n  function approveAndCall(address spender, uint256 value, bytes calldata data) external returns(bool);\\n  function balanceOf(address) external view returns(uint256);\\n  function burn(address from, uint256 amount) external returns(bool);\\n  function changeMPCOwner(address newVault) external returns(bool);\\n  function changeVault(address newVault) external returns(bool);\\n  function decimals() external view returns(uint8);\\n  function delay() external view returns(uint256);\\n  function delayDelay() external view returns(uint256);\\n  function delayMinter() external view returns(uint256);\\n  function delayVault() external view returns(uint256);\\n  function deposit(uint256 amount, address to) external returns(uint256);\\n  function deposit(uint256 amount) external returns(uint256);\\n  function deposit() external returns(uint256);\\n  function depositVault(uint256 amount, address to) external returns(uint256);\\n  function depositWithPermit(address target, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s, address to) external returns(uint256);\\n  function depositWithTransferPermit(address target, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s, address to) external returns(uint256);\\n  function getAllMinters() external view returns(address[] memory);\\n  function initVault(address _vault) external;\\n  function isMinter(address) external view returns(bool);\\n  function mint(address to, uint256 amount) external returns(bool);\\n  function minters(uint256) external view returns(address);\\n  function mpc() external view returns(address);\\n  function name() external view returns(string memory);\\n  function nonces(address) external view returns(uint256);\\n  function owner() external view returns(address);\\n  function pendingDelay() external view returns(uint256);\\n  function pendingMinter() external view returns(address);\\n  function pendingVault() external view returns(address);\\n  function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n  function revokeMinter(address _auth) external;\\n  function setMinter(address _auth) external;\\n  function setVault(address _vault) external;\\n  function setVaultOnly(bool enabled) external;\\n  function symbol() external view returns(string memory);\\n  function totalSupply() external view returns(uint256);\\n  function transfer(address to, uint256 value) external returns(bool);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns(bool);\\n  function transferFrom(address from, address to, uint256 value) external returns(bool);\\n  function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns(bool);\\n  function underlying() external view returns(address);\\n  function vault() external view returns(address);\\n  function withdraw(uint256 amount, address to) external returns(uint256);\\n  function withdraw(uint256 amount) external returns(uint256);\\n  function withdraw() external returns(uint256);\\n  function withdrawVault(address from, uint256 amount, address to) external returns(uint256);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\nlibrary SafeMath {\\n    \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    \\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    \\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n    \\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    \\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n    \\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n    \\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ninterface IERC20 {\\n    \\n    function totalSupply() external view returns (uint256);\\n    \\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    \\n    function allowance(address owner, address spender) external view returns (uint256);\\n    \\n    function approve(address spender, uint256 amount) external returns (bool);\\n    \\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    \\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary Address {\\n    \\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n    \\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n    \\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n    \\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n    \\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n    \\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n    \\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n    \\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n    \\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    \\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n \\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    \\n    \\n    constructor (string memory __name, string memory __symbol) public {\\n        _name = __name;\\n        _symbol = __symbol;\\n        _decimals = 18;\\n    }\\n    \\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n    \\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n    \\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n    \\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n    \\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n    \\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n    \\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n    \\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    \\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    \\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n    \\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n    \\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n    \\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n    \\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n    \\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n    \\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        _beforeTokenTransfer(account, address(0), amount);\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n    \\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n    \\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\ninterface IERC20Permit {\\n    \\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n    \\n    function nonces(address owner) external view returns (uint256);\\n    \\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return;\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n    \\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n    \\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n    \\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n    \\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n    \\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n        return (signer, RecoverError.NoError);\\n    }\\n    \\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n    \\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n    \\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\\nabstract contract EIP712 {\\n    \\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n    \\n    \\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n    \\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n    \\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\\nlibrary Counters {\\n    struct Counter {\\n        uint256 _value;\\n    }\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n    mapping(address => Counters.Counter) private _nonces;\\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    \\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n    \\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n        _approve(owner, spender, value);\\n    }\\n    \\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n    \\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n    function PERMIT_TYPEHASH() external view returns (bytes32) {\\n        return _PERMIT_TYPEHASH;\\n    }\\n    \\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n    function safeTransfer(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n    constructor (address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private _status;\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n    \\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\ncontract CrossChainCanonical is ERC20Permit, Owned, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    \\n    address public timelock_address;\\n    address public custodian_address; \\n    uint256 public mint_cap;\\n    mapping(address => uint256[2]) public swap_fees;\\n    mapping(address => bool) public fee_exempt_list;\\n    address[] public bridge_tokens_array;\\n    mapping(address => bool) public bridge_tokens;\\n    address[] public minters_array;\\n    mapping(address => bool) public minters;\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    bool public exchangesPaused;\\n    mapping(address => bool) public canSwap;\\n    \\n    modifier onlyByOwnGov() {\\n        require(msg.sender == timelock_address || msg.sender == owner, \\\"Not owner or timelock\\\");\\n        _;\\n    }\\n    modifier onlyByOwnGovCust() {\\n        require(msg.sender == timelock_address || msg.sender == owner || msg.sender == custodian_address, \\\"Not owner, tlck, or custd\\\");\\n        _;\\n    }\\n    modifier onlyMinters() {\\n       require(minters[msg.sender], \\\"Not a minter\\\");\\n        _;\\n    } \\n    modifier onlyMintersOwnGov() {\\n       require(_isMinterOwnGov(msg.sender), \\\"Not minter, owner, or tlck\\\");\\n        _;\\n    } \\n    modifier validBridgeToken(address token_address) {\\n       require(bridge_tokens[token_address], \\\"Invalid old token\\\");\\n        _;\\n    } \\n    \\n    constructor (\\n        string memory _name,\\n        string memory _symbol,\\n        address _creator_address,\\n        uint256 _initial_mint_amt,\\n        address _custodian_address,\\n        address[] memory _bridge_tokens\\n    ) ERC20(_name, _symbol) ERC20Permit(_name) Owned(_creator_address) {\\n        custodian_address = _custodian_address;\\n        for (uint256 i = 0; i < _bridge_tokens.length; i++){ \\n            bridge_tokens[_bridge_tokens[i]] = true;\\n            bridge_tokens_array.push(_bridge_tokens[i]);\\n            swap_fees[_bridge_tokens[i]] = [400, 400];\\n            canSwap[_bridge_tokens[i]] = true;\\n        }\\n        mint_cap = _initial_mint_amt;\\n        super._mint(_creator_address, _initial_mint_amt);\\n    }\\n    \\n    function allBridgeTokens() external view returns (address[] memory) {\\n        return bridge_tokens_array;\\n    }\\n    function _isMinterOwnGov(address the_address) internal view returns (bool) {\\n        return (the_address == timelock_address || the_address == owner || minters[the_address]);\\n    }\\n    function _isFeeExempt(address the_address) internal view returns (bool) {\\n        return (_isMinterOwnGov(the_address) || fee_exempt_list[the_address]);\\n    }\\n    \\n    function _mint_capped(address account, uint256 amount) internal {\\n        require(totalSupply() + amount <= mint_cap, \\\"Mint cap\\\");\\n        super._mint(account, amount);\\n    }\\n    \\n    function exchangeOldForCanonical(address bridge_token_address, uint256 token_amount) external nonReentrant validBridgeToken(bridge_token_address) returns (uint256 canonical_tokens_out) {\\n        require(!exchangesPaused && canSwap[bridge_token_address], \\\"Exchanges paused\\\");\\n        TransferHelper.safeTransferFrom(bridge_token_address, msg.sender, address(this), token_amount);\\n        canonical_tokens_out = token_amount;\\n        if (!_isFeeExempt(msg.sender)) {\\n            canonical_tokens_out -= ((canonical_tokens_out * swap_fees[bridge_token_address][0]) / PRICE_PRECISION);\\n        }\\n        _mint_capped(msg.sender, canonical_tokens_out);\\n    }\\n    function exchangeCanonicalForOld(address bridge_token_address, uint256 token_amount) external nonReentrant validBridgeToken(bridge_token_address) returns (uint256 bridge_tokens_out) {\\n        require(!exchangesPaused && canSwap[bridge_token_address], \\\"Exchanges paused\\\");\\n        \\n        super._burn(msg.sender, token_amount);\\n        bridge_tokens_out = token_amount;\\n        if (!_isFeeExempt(msg.sender)) {\\n            bridge_tokens_out -= ((bridge_tokens_out * swap_fees[bridge_token_address][1]) / PRICE_PRECISION);\\n        }\\n        TransferHelper.safeTransfer(bridge_token_address, msg.sender, bridge_tokens_out);\\n    }\\n    \\n    function withdrawBridgeTokens(address bridge_token_address, uint256 bridge_token_amount) external onlyMintersOwnGov validBridgeToken(bridge_token_address) {\\n        TransferHelper.safeTransfer(bridge_token_address, msg.sender, bridge_token_amount);\\n    }\\n    \\n    function minter_mint(address m_address, uint256 m_amount) external onlyMinters {\\n        _mint_capped(m_address, m_amount);\\n        emit TokenMinted(msg.sender, m_address, m_amount);\\n    }\\n    function minter_burn(uint256 amount) external onlyMinters {\\n        super._burn(msg.sender, amount);\\n        emit TokenBurned(msg.sender, amount);\\n    }\\n    \\n    function toggleExchanges() external onlyByOwnGovCust {\\n        exchangesPaused = !exchangesPaused;\\n    }\\n    \\n    function addBridgeToken(address bridge_token_address, uint256 _brdg_to_can_fee, uint256 _can_to_brdg_fee) external onlyByOwnGov {\\n        for (uint i = 0; i < bridge_tokens_array.length; i++){ \\n            if (bridge_tokens_array[i] == bridge_token_address){\\n                revert(\\\"Token already present\\\");\\n            }\\n        }\\n        bridge_tokens[bridge_token_address] = true;\\n        bridge_tokens_array.push(bridge_token_address);\\n        canSwap[bridge_token_address] = true;\\n        swap_fees[bridge_token_address][0] = _brdg_to_can_fee;\\n        swap_fees[bridge_token_address][1] = _can_to_brdg_fee;\\n        emit BridgeTokenAdded(bridge_token_address);\\n    }\\n    function toggleBridgeToken(address bridge_token_address) external onlyByOwnGov {\\n        bool bridge_tkn_found;\\n        for (uint i = 0; i < bridge_tokens_array.length; i++){ \\n            if (bridge_tokens_array[i] == bridge_token_address){\\n                bridge_tkn_found = true;\\n                break;\\n            }\\n        }\\n        require(bridge_tkn_found, \\\"Bridge tkn not in array\\\");\\n        bridge_tokens[bridge_token_address] = !bridge_tokens[bridge_token_address];\\n        canSwap[bridge_token_address] = !canSwap[bridge_token_address];\\n        emit BridgeTokenToggled(bridge_token_address, !bridge_tokens[bridge_token_address]);\\n    }\\n    function addMinter(address minter_address) external onlyByOwnGov {\\n        require(minter_address != address(0), \\\"Zero address detected\\\");\\n        require(minters[minter_address] == false, \\\"Address already exists\\\");\\n        minters[minter_address] = true; \\n        minters_array.push(minter_address);\\n        emit MinterAdded(minter_address);\\n    }\\n    function removeMinter(address minter_address) external onlyByOwnGov {\\n        require(minter_address != address(0), \\\"Zero address detected\\\");\\n        require(minters[minter_address] == true, \\\"Address nonexistant\\\");\\n        \\n        delete minters[minter_address];\\n        for (uint i = 0; i < minters_array.length; i++){ \\n            if (minters_array[i] == minter_address) {\\n                minters_array[i] = address(0);\\n                break;\\n            }\\n        }\\n        emit MinterRemoved(minter_address);\\n    }\\n    function setMintCap(uint256 _mint_cap) external onlyByOwnGov {\\n        mint_cap = _mint_cap;\\n        emit MintCapSet(_mint_cap);\\n    }\\n    function setSwapFees(address bridge_token_address, uint256 _bridge_to_canonical, uint256 _canonical_to_old) external onlyByOwnGov {\\n        swap_fees[bridge_token_address] = [_bridge_to_canonical, _canonical_to_old];\\n    }\\n    function toggleFeesForAddress(address the_address) external onlyByOwnGov {\\n        fee_exempt_list[the_address] = !fee_exempt_list[the_address];\\n    }\\n    function setTimelock(address new_timelock) external onlyByOwnGov {\\n        require(new_timelock != address(0), \\\"Zero address detected\\\");\\n        timelock_address = new_timelock;\\n        emit TimelockSet(new_timelock);\\n    }\\n    function setCustodian(address _custodian_address) external onlyByOwnGov {\\n        require(_custodian_address != address(0), \\\"Zero address detected\\\");\\n        custodian_address = _custodian_address;\\n        emit CustodianSet(_custodian_address);\\n    }\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\\n        require(!bridge_tokens[tokenAddress], \\\"Cannot withdraw bridge tokens\\\");\\n        require(tokenAddress != address(this), \\\"Cannot withdraw these tokens\\\");\\n        TransferHelper.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\\n    }\\n    \\n    event TokenBurned(address indexed from, uint256 amount);\\n    event TokenMinted(address indexed from, address indexed to, uint256 amount);\\n    event BridgeTokenAdded(address indexed bridge_token_address);\\n    event BridgeTokenToggled(address indexed bridge_token_address, bool state);\\n    event MinterAdded(address pool_address);\\n    event MinterRemoved(address pool_address);\\n    event MintCapSet(uint256 new_mint_cap);\\n    event TimelockSet(address new_timelock);\\n    event CustodianSet(address custodian_address);\\n}\\ninterface IFrax {\\n  function COLLATERAL_RATIO_PAUSER() external view returns (bytes32);\\n  function DEFAULT_ADMIN_ADDRESS() external view returns (address);\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n  function addPool(address pool_address ) external;\\n  function allowance(address owner, address spender ) external view returns (uint256);\\n  function approve(address spender, uint256 amount ) external returns (bool);\\n  function balanceOf(address account ) external view returns (uint256);\\n  function burn(uint256 amount ) external;\\n  function burnFrom(address account, uint256 amount ) external;\\n  function collateral_ratio_paused() external view returns (bool);\\n  function controller_address() external view returns (address);\\n  function creator_address() external view returns (address);\\n  function decimals() external view returns (uint8);\\n  function decreaseAllowance(address spender, uint256 subtractedValue ) external returns (bool);\\n  function eth_usd_consumer_address() external view returns (address);\\n  function eth_usd_price() external view returns (uint256);\\n  function frax_eth_oracle_address() external view returns (address);\\n  function frax_info() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\\n  function frax_pools(address ) external view returns (bool);\\n  function frax_pools_array(uint256 ) external view returns (address);\\n  function frax_price() external view returns (uint256);\\n  function frax_step() external view returns (uint256);\\n  function fxs_address() external view returns (address);\\n  function fxs_eth_oracle_address() external view returns (address);\\n  function fxs_price() external view returns (uint256);\\n  function genesis_supply() external view returns (uint256);\\n  function getRoleAdmin(bytes32 role ) external view returns (bytes32);\\n  function getRoleMember(bytes32 role, uint256 index ) external view returns (address);\\n  function getRoleMemberCount(bytes32 role ) external view returns (uint256);\\n  function globalCollateralValue() external view returns (uint256);\\n  function global_collateral_ratio() external view returns (uint256);\\n  function grantRole(bytes32 role, address account ) external;\\n  function hasRole(bytes32 role, address account ) external view returns (bool);\\n  function increaseAllowance(address spender, uint256 addedValue ) external returns (bool);\\n  function last_call_time() external view returns (uint256);\\n  function minting_fee() external view returns (uint256);\\n  function name() external view returns (string memory);\\n  function owner_address() external view returns (address);\\n  function pool_burn_from(address b_address, uint256 b_amount ) external;\\n  function pool_mint(address m_address, uint256 m_amount ) external;\\n  function price_band() external view returns (uint256);\\n  function price_target() external view returns (uint256);\\n  function redemption_fee() external view returns (uint256);\\n  function refreshCollateralRatio() external;\\n  function refresh_cooldown() external view returns (uint256);\\n  function removePool(address pool_address ) external;\\n  function renounceRole(bytes32 role, address account ) external;\\n  function revokeRole(bytes32 role, address account ) external;\\n  function setController(address _controller_address ) external;\\n  function setETHUSDOracle(address _eth_usd_consumer_address ) external;\\n  function setFRAXEthOracle(address _frax_oracle_addr, address _weth_address ) external;\\n  function setFXSAddress(address _fxs_address ) external;\\n  function setFXSEthOracle(address _fxs_oracle_addr, address _weth_address ) external;\\n  function setFraxStep(uint256 _new_step ) external;\\n  function setMintingFee(uint256 min_fee ) external;\\n  function setOwner(address _owner_address ) external;\\n  function setPriceBand(uint256 _price_band ) external;\\n  function setPriceTarget(uint256 _new_price_target ) external;\\n  function setRedemptionFee(uint256 red_fee ) external;\\n  function setRefreshCooldown(uint256 _new_cooldown ) external;\\n  function setTimelock(address new_timelock ) external;\\n  function symbol() external view returns (string memory);\\n  function timelock_address() external view returns (address);\\n  function toggleCollateralRatio() external;\\n  function totalSupply() external view returns (uint256);\\n  function transfer(address recipient, uint256 amount ) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\\n  function weth_address() external view returns (address);\\n}\\ninterface IFxs {\\n  function DEFAULT_ADMIN_ROLE() external view returns(bytes32);\\n  function FRAXStablecoinAdd() external view returns(address);\\n  function FXS_DAO_min() external view returns(uint256);\\n  function allowance(address owner, address spender) external view returns(uint256);\\n  function approve(address spender, uint256 amount) external returns(bool);\\n  function balanceOf(address account) external view returns(uint256);\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function checkpoints(address, uint32) external view returns(uint32 fromBlock, uint96 votes);\\n  function decimals() external view returns(uint8);\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns(bool);\\n  function genesis_supply() external view returns(uint256);\\n  function getCurrentVotes(address account) external view returns(uint96);\\n  function getPriorVotes(address account, uint256 blockNumber) external view returns(uint96);\\n  function getRoleAdmin(bytes32 role) external view returns(bytes32);\\n  function getRoleMember(bytes32 role, uint256 index) external view returns(address);\\n  function getRoleMemberCount(bytes32 role) external view returns(uint256);\\n  function grantRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns(bool);\\n  function increaseAllowance(address spender, uint256 addedValue) external returns(bool);\\n  function mint(address to, uint256 amount) external;\\n  function name() external view returns(string memory);\\n  function numCheckpoints(address) external view returns(uint32);\\n  function oracle_address() external view returns(address);\\n  function owner_address() external view returns(address);\\n  function pool_burn_from(address b_address, uint256 b_amount) external;\\n  function pool_mint(address m_address, uint256 m_amount) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function setFRAXAddress(address frax_contract_address) external;\\n  function setFXSMinDAO(uint256 min_FXS) external;\\n  function setOracle(address new_oracle) external;\\n  function setOwner(address _owner_address) external;\\n  function setTimelock(address new_timelock) external;\\n  function symbol() external view returns(string memory);\\n  function timelock_address() external view returns(address);\\n  function toggleVotes() external;\\n  function totalSupply() external view returns(uint256);\\n  function trackingVotes() external view returns(bool);\\n  function transfer(address recipient, uint256 amount) external returns(bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\\n}\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\ninterface IFraxAMOMinter {\\n  function FRAX() external view returns(address);\\n  function FXS() external view returns(address);\\n  function acceptOwnership() external;\\n  function addAMO(address amo_address, bool sync_too) external;\\n  function allAMOAddresses() external view returns(address[] memory);\\n  function allAMOsLength() external view returns(uint256);\\n  function amos(address) external view returns(bool);\\n  function amos_array(uint256) external view returns(address);\\n  function burnFraxFromAMO(uint256 frax_amount) external;\\n  function burnFxsFromAMO(uint256 fxs_amount) external;\\n  function col_idx() external view returns(uint256);\\n  function collatDollarBalance() external view returns(uint256);\\n  function collatDollarBalanceStored() external view returns(uint256);\\n  function collat_borrow_cap() external view returns(int256);\\n  function collat_borrowed_balances(address) external view returns(int256);\\n  function collat_borrowed_sum() external view returns(int256);\\n  function collateral_address() external view returns(address);\\n  function collateral_token() external view returns(address);\\n  function correction_offsets_amos(address, uint256) external view returns(int256);\\n  function custodian_address() external view returns(address);\\n  function dollarBalances() external view returns(uint256 frax_val_e18, uint256 collat_val_e18);\\n  function fraxDollarBalanceStored() external view returns(uint256);\\n  function fraxTrackedAMO(address amo_address) external view returns(int256);\\n  function fraxTrackedGlobal() external view returns(int256);\\n  function frax_mint_balances(address) external view returns(int256);\\n  function frax_mint_cap() external view returns(int256);\\n  function frax_mint_sum() external view returns(int256);\\n  function fxs_mint_balances(address) external view returns(int256);\\n  function fxs_mint_cap() external view returns(int256);\\n  function fxs_mint_sum() external view returns(int256);\\n  function giveCollatToAMO(address destination_amo, uint256 collat_amount) external;\\n  function min_cr() external view returns(uint256);\\n  function mintFraxForAMO(address destination_amo, uint256 frax_amount) external;\\n  function mintFxsForAMO(address destination_amo, uint256 fxs_amount) external;\\n  function missing_decimals() external view returns(uint256);\\n  function nominateNewOwner(address _owner) external;\\n  function nominatedOwner() external view returns(address);\\n  function oldPoolCollectAndGive(address destination_amo) external;\\n  function oldPoolRedeem(uint256 frax_amount) external;\\n  function old_pool() external view returns(address);\\n  function owner() external view returns(address);\\n  function pool() external view returns(address);\\n  function receiveCollatFromAMO(uint256 usdc_amount) external;\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\\n  function removeAMO(address amo_address, bool sync_too) external;\\n  function setAMOCorrectionOffsets(address amo_address, int256 frax_e18_correction, int256 collat_e18_correction) external;\\n  function setCollatBorrowCap(uint256 _collat_borrow_cap) external;\\n  function setCustodian(address _custodian_address) external;\\n  function setFraxMintCap(uint256 _frax_mint_cap) external;\\n  function setFraxPool(address _pool_address) external;\\n  function setFxsMintCap(uint256 _fxs_mint_cap) external;\\n  function setMinimumCollateralRatio(uint256 _min_cr) external;\\n  function setTimelock(address new_timelock) external;\\n  function syncDollarBalances() external;\\n  function timelock_address() external view returns(address);\\n}\\ncontract FraxPoolV3 is Owned {\\n    using SafeMath for uint256;\\n    \\n    address public timelock_address;\\n    address public custodian_address;\\n    IFrax private FRAX = IFrax(0x853d955aCEf822Db058eb8505911ED77F175b99e);\\n    IFxs private FXS = IFxs(0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0);\\n    mapping(address => bool) public amo_minter_addresses;\\n    AggregatorV3Interface public priceFeedFRAXUSD = AggregatorV3Interface(0xB9E1E3A9feFf48998E45Fa90847ed4D467E8BcfD);\\n    AggregatorV3Interface public priceFeedFXSUSD = AggregatorV3Interface(0x6Ebc52C8C1089be9eB3945C4350B68B8E4C2233f);\\n    uint256 private chainlink_frax_usd_decimals;\\n    uint256 private chainlink_fxs_usd_decimals;\\n    address[] public collateral_addresses;\\n    string[] public collateral_symbols;\\n    uint256[] public missing_decimals;\\n    uint256[] public pool_ceilings;\\n    uint256[] public collateral_prices;\\n    mapping(address => uint256) public collateralAddrToIdx;\\n    mapping(address => bool) public enabled_collaterals;\\n    \\n    mapping (address => uint256) public redeemFXSBalances;\\n    mapping (address => mapping(uint256 => uint256)) public redeemCollateralBalances;\\n    uint256[] public unclaimedPoolCollateral;\\n    uint256 public unclaimedPoolFXS;\\n    mapping (address => uint256) public lastRedeemed;\\n    uint256 public redemption_delay = 2;\\n    uint256 public redeem_price_threshold = 990000;\\n    uint256 public mint_price_threshold = 1010000;\\n    \\n    mapping(uint256 => uint256) public bbkHourlyCum;\\n    uint256 public bbkMaxColE18OutPerHour = 1000e18;\\n    mapping(uint256 => uint256) public rctHourlyCum;\\n    uint256 public rctMaxFxsOutPerHour = 1000e18;\\n    uint256[] private minting_fee;\\n    uint256[] private redemption_fee;\\n    uint256[] private buyback_fee;\\n    uint256[] private recollat_fee;\\n    uint256 public bonus_rate;\\n    \\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    bool[] private mintPaused;\\n    bool[] private redeemPaused;\\n    bool[] private recollateralizePaused;\\n    bool[] private buyBackPaused;\\n    bool[] private borrowingPaused;\\n    \\n    modifier onlyByOwnGov() {\\n        require(msg.sender == timelock_address || msg.sender == owner, \\\"Not owner or timelock\\\");\\n        _;\\n    }\\n    modifier onlyByOwnGovCust() {\\n        require(msg.sender == timelock_address || msg.sender == owner || msg.sender == custodian_address, \\\"Not owner, tlck, or custd\\\");\\n        _;\\n    }\\n    modifier onlyAMOMinters() {\\n        require(amo_minter_addresses[msg.sender], \\\"Not an AMO Minter\\\");\\n        _;\\n    }\\n    modifier collateralEnabled(uint256 col_idx) {\\n        require(enabled_collaterals[collateral_addresses[col_idx]], \\\"Collateral disabled\\\");\\n        _;\\n    }\\n \\n    \\n    \\n    constructor (\\n        address _pool_manager_address,\\n        address _custodian_address,\\n        address _timelock_address,\\n        address[] memory _collateral_addresses,\\n        uint256[] memory _pool_ceilings,\\n        uint256[] memory _initial_fees\\n    ) Owned(_pool_manager_address){\\n        timelock_address = _timelock_address;\\n        custodian_address = _custodian_address;\\n        collateral_addresses = _collateral_addresses;\\n        for (uint256 i = 0; i < _collateral_addresses.length; i++){ \\n            collateralAddrToIdx[_collateral_addresses[i]] = i;\\n            enabled_collaterals[_collateral_addresses[i]] = false;\\n            missing_decimals.push(uint256(18).sub(ERC20(_collateral_addresses[i]).decimals()));\\n            collateral_symbols.push(ERC20(_collateral_addresses[i]).symbol());\\n            unclaimedPoolCollateral.push(0);\\n            collateral_prices.push(PRICE_PRECISION);\\n            minting_fee.push(_initial_fees[0]);\\n            redemption_fee.push(_initial_fees[1]);\\n            buyback_fee.push(_initial_fees[2]);\\n            recollat_fee.push(_initial_fees[3]);\\n            mintPaused.push(false);\\n            redeemPaused.push(false);\\n            recollateralizePaused.push(false);\\n            buyBackPaused.push(false);\\n            borrowingPaused.push(false);\\n        }\\n        pool_ceilings = _pool_ceilings;\\n        chainlink_frax_usd_decimals = priceFeedFRAXUSD.decimals();\\n        chainlink_fxs_usd_decimals = priceFeedFXSUSD.decimals();\\n    }\\n    \\n    \\n    struct CollateralInformation {\\n        uint256 index;\\n        string symbol;\\n        address col_addr;\\n        bool is_enabled;\\n        uint256 missing_decs;\\n        uint256 price;\\n        uint256 pool_ceiling;\\n        bool mint_paused;\\n        bool redeem_paused;\\n        bool recollat_paused;\\n        bool buyback_paused;\\n        bool borrowing_paused;\\n        uint256 minting_fee;\\n        uint256 redemption_fee;\\n        uint256 buyback_fee;\\n        uint256 recollat_fee;\\n    }\\n    \\n    function collateral_information(address collat_address) external view returns (CollateralInformation memory return_data){\\n        require(enabled_collaterals[collat_address], \\\"Invalid collateral\\\");\\n        uint256 idx = collateralAddrToIdx[collat_address];\\n        \\n        return_data = CollateralInformation(\\n            idx,\\n            collateral_symbols[idx],\\n            collat_address,\\n            enabled_collaterals[collat_address],\\n            missing_decimals[idx],\\n            collateral_prices[idx],\\n            pool_ceilings[idx],\\n            mintPaused[idx],\\n            redeemPaused[idx],\\n            recollateralizePaused[idx],\\n            buyBackPaused[idx],\\n            borrowingPaused[idx],\\n            minting_fee[idx],\\n            redemption_fee[idx],\\n            buyback_fee[idx],\\n            recollat_fee[idx]\\n        );\\n    }\\n    function allCollaterals() external view returns (address[] memory) {\\n        return collateral_addresses;\\n    }\\n    function getFRAXPrice() public view returns (uint256) {\\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = priceFeedFRAXUSD.latestRoundData();\\n        require(price >= 0 && updatedAt!= 0 && answeredInRound >= roundID, \\\"Invalid chainlink price\\\");\\n        return uint256(price).mul(PRICE_PRECISION).div(10 ** chainlink_frax_usd_decimals);\\n    }\\n    function getFXSPrice() public view returns (uint256) {\\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = priceFeedFXSUSD.latestRoundData();\\n        require(price >= 0 && updatedAt!= 0 && answeredInRound >= roundID, \\\"Invalid chainlink price\\\");\\n        return uint256(price).mul(PRICE_PRECISION).div(10 ** chainlink_fxs_usd_decimals);\\n    }\\n    function getFRAXInCollateral(uint256 col_idx, uint256 frax_amount) public view returns (uint256) {\\n        return frax_amount.mul(PRICE_PRECISION).div(10 ** missing_decimals[col_idx]).div(collateral_prices[col_idx]);\\n    }\\n    function freeCollatBalance(uint256 col_idx) public view returns (uint256) {\\n        return ERC20(collateral_addresses[col_idx]).balanceOf(address(this)).sub(unclaimedPoolCollateral[col_idx]);\\n    }\\n    function collatDollarBalance() external view returns (uint256 balance_tally) {\\n        balance_tally = 0;\\n        for (uint256 i = 0; i < collateral_addresses.length; i++){ \\n            balance_tally += freeCollatBalance(i).mul(10 ** missing_decimals[i]).mul(collateral_prices[i]).div(PRICE_PRECISION);\\n        }\\n    }\\n    function comboCalcBbkRct(uint256 cur, uint256 max, uint256 theo) internal pure returns (uint256) {\\n        if (cur >= max) {\\n            return 0;\\n        }\\n        else {\\n            uint256 available = max.sub(cur);\\n            if (theo >= available) {\\n                return available;\\n            }\\n            else {\\n                return theo;\\n            }\\n        } \\n    }\\n    function buybackAvailableCollat() public view returns (uint256) {\\n        uint256 total_supply = FRAX.totalSupply();\\n        uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\\n        uint256 global_collat_value = FRAX.globalCollateralValue();\\n        if (global_collateral_ratio > PRICE_PRECISION) global_collateral_ratio = PRICE_PRECISION;\\n        uint256 required_collat_dollar_value_d18 = (total_supply.mul(global_collateral_ratio)).div(PRICE_PRECISION);\\n        \\n        if (global_collat_value > required_collat_dollar_value_d18) {\\n            uint256 theoretical_bbk_amt = global_collat_value.sub(required_collat_dollar_value_d18);\\n            uint256 current_hr_bbk = bbkHourlyCum[curEpochHr()];\\n            return comboCalcBbkRct(current_hr_bbk, bbkMaxColE18OutPerHour, theoretical_bbk_amt);\\n        }\\n        else return 0;\\n    }\\n    function recollatTheoColAvailableE18() public view returns (uint256) {\\n        uint256 frax_total_supply = FRAX.totalSupply();\\n        uint256 effective_collateral_ratio = FRAX.globalCollateralValue().mul(PRICE_PRECISION).div(frax_total_supply);\\n        \\n        uint256 desired_collat_e24 = (FRAX.global_collateral_ratio()).mul(frax_total_supply);\\n        uint256 effective_collat_e24 = effective_collateral_ratio.mul(frax_total_supply);\\n        if (effective_collat_e24 >= desired_collat_e24) return 0;\\n        else {\\n            return (desired_collat_e24.sub(effective_collat_e24)).div(PRICE_PRECISION);\\n        }\\n    }\\n    function recollatAvailableFxs() public view returns (uint256) {\\n        uint256 fxs_price = getFXSPrice();\\n        uint256 recollat_theo_available_e18 = recollatTheoColAvailableE18();\\n        uint256 fxs_theo_out = recollat_theo_available_e18.mul(PRICE_PRECISION).div(fxs_price);\\n        uint256 current_hr_rct = rctHourlyCum[curEpochHr()];\\n        return comboCalcBbkRct(current_hr_rct, rctMaxFxsOutPerHour, fxs_theo_out);\\n    }\\n    function curEpochHr() public view returns (uint256) {\\n        return (block.timestamp / 3600);\\n    }\\n    \\n     function mintFrax(\\n        uint256 col_idx, \\n        uint256 frax_amt,\\n        uint256 frax_out_min,\\n        uint256 max_collat_in,\\n        uint256 max_fxs_in,\\n        bool one_to_one_override\\n    ) external collateralEnabled(col_idx) returns (\\n        uint256 total_frax_mint, \\n        uint256 collat_needed, \\n        uint256 fxs_needed\\n    ) {\\n        require(mintPaused[col_idx] == false, \\\"Minting is paused\\\");\\n        require(getFRAXPrice() >= mint_price_threshold, \\\"Frax price too low\\\");\\n        uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\\n        if (one_to_one_override || global_collateral_ratio >= PRICE_PRECISION) { \\n            collat_needed = getFRAXInCollateral(col_idx, frax_amt);\\n            fxs_needed = 0;\\n        } else if (global_collateral_ratio == 0) { \\n            collat_needed = 0;\\n            fxs_needed = frax_amt.mul(PRICE_PRECISION).div(getFXSPrice());\\n        } else { \\n            uint256 frax_for_collat = frax_amt.mul(global_collateral_ratio).div(PRICE_PRECISION);\\n            uint256 frax_for_fxs = frax_amt.sub(frax_for_collat);\\n            collat_needed = getFRAXInCollateral(col_idx, frax_for_collat);\\n            fxs_needed = frax_for_fxs.mul(PRICE_PRECISION).div(getFXSPrice());\\n        }\\n        total_frax_mint = (frax_amt.mul(PRICE_PRECISION.sub(minting_fee[col_idx]))).div(PRICE_PRECISION);\\n        require((total_frax_mint >= frax_out_min), \\\"FRAX slippage\\\");\\n        require((collat_needed <= max_collat_in), \\\"Collat slippage\\\");\\n        require((fxs_needed <= max_fxs_in), \\\"FXS slippage\\\");\\n        require(freeCollatBalance(col_idx).add(collat_needed) <= pool_ceilings[col_idx], \\\"Pool ceiling\\\");\\n        FXS.pool_burn_from(msg.sender, fxs_needed);\\n        TransferHelper.safeTransferFrom(collateral_addresses[col_idx], msg.sender, address(this), collat_needed);\\n        FRAX.pool_mint(msg.sender, total_frax_mint);\\n    }\\n    function redeemFrax(\\n        uint256 col_idx, \\n        uint256 frax_amount, \\n        uint256 fxs_out_min, \\n        uint256 col_out_min\\n    ) external collateralEnabled(col_idx) returns (\\n        uint256 collat_out, \\n        uint256 fxs_out\\n    ) {\\n        require(redeemPaused[col_idx] == false, \\\"Redeeming is paused\\\");\\n        require(getFRAXPrice() <= redeem_price_threshold, \\\"Frax price too high\\\");\\n        uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\\n        uint256 frax_after_fee = (frax_amount.mul(PRICE_PRECISION.sub(redemption_fee[col_idx]))).div(PRICE_PRECISION);\\n        if(global_collateral_ratio >= PRICE_PRECISION) { \\n            collat_out = getFRAXInCollateral(col_idx, frax_after_fee);\\n            fxs_out = 0;\\n        } else if (global_collateral_ratio == 0) { \\n            fxs_out = frax_after_fee\\n                            .mul(PRICE_PRECISION)\\n                            .div(getFXSPrice());\\n            collat_out = 0;\\n        } else { \\n            collat_out = getFRAXInCollateral(col_idx, frax_after_fee)\\n                            .mul(global_collateral_ratio)\\n                            .div(PRICE_PRECISION);\\n            fxs_out = frax_after_fee\\n                            .mul(PRICE_PRECISION.sub(global_collateral_ratio))\\n                            .div(getFXSPrice());\\n        }\\n        require(collat_out <= (ERC20(collateral_addresses[col_idx])).balanceOf(address(this)).sub(unclaimedPoolCollateral[col_idx]), \\\"Insufficient pool collateral\\\");\\n        require(collat_out >= col_out_min, \\\"Collateral slippage\\\");\\n        require(fxs_out >= fxs_out_min, \\\"FXS slippage\\\");\\n        redeemCollateralBalances[msg.sender][col_idx] = redeemCollateralBalances[msg.sender][col_idx].add(collat_out);\\n        unclaimedPoolCollateral[col_idx] = unclaimedPoolCollateral[col_idx].add(collat_out);\\n        redeemFXSBalances[msg.sender] = redeemFXSBalances[msg.sender].add(fxs_out);\\n        unclaimedPoolFXS = unclaimedPoolFXS.add(fxs_out);\\n        lastRedeemed[msg.sender] = block.number;\\n        FRAX.pool_burn_from(msg.sender, frax_amount);\\n        FXS.pool_mint(address(this), fxs_out);\\n    }\\n    function collectRedemption(uint256 col_idx) external returns (uint256 fxs_amount, uint256 collateral_amount) {\\n        require(redeemPaused[col_idx] == false, \\\"Redeeming is paused\\\");\\n        require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \\\"Too soon\\\");\\n        bool sendFXS = false;\\n        bool sendCollateral = false;\\n        if(redeemFXSBalances[msg.sender] > 0){\\n            fxs_amount = redeemFXSBalances[msg.sender];\\n            redeemFXSBalances[msg.sender] = 0;\\n            unclaimedPoolFXS = unclaimedPoolFXS.sub(fxs_amount);\\n            sendFXS = true;\\n        }\\n        \\n        if(redeemCollateralBalances[msg.sender][col_idx] > 0){\\n            collateral_amount = redeemCollateralBalances[msg.sender][col_idx];\\n            redeemCollateralBalances[msg.sender][col_idx] = 0;\\n            unclaimedPoolCollateral[col_idx] = unclaimedPoolCollateral[col_idx].sub(collateral_amount);\\n            sendCollateral = true;\\n        }\\n        if(sendFXS){\\n            TransferHelper.safeTransfer(address(FXS), msg.sender, fxs_amount);\\n        }\\n        if(sendCollateral){\\n            TransferHelper.safeTransfer(collateral_addresses[col_idx], msg.sender, collateral_amount);\\n        }\\n    }\\n    function buyBackFxs(uint256 col_idx, uint256 fxs_amount, uint256 col_out_min) external collateralEnabled(col_idx) returns (uint256 col_out) {\\n        require(buyBackPaused[col_idx] == false, \\\"Buyback is paused\\\");\\n        uint256 fxs_price = getFXSPrice();\\n        uint256 available_excess_collat_dv = buybackAvailableCollat();\\n        require(available_excess_collat_dv > 0, \\\"Insuf Collat Avail For BBK\\\");\\n        uint256 fxs_dollar_value_d18 = fxs_amount.mul(fxs_price).div(PRICE_PRECISION);\\n        require(fxs_dollar_value_d18 <= available_excess_collat_dv, \\\"Insuf Collat Avail For BBK\\\");\\n        uint256 collateral_equivalent_d18 = fxs_dollar_value_d18.mul(PRICE_PRECISION).div(collateral_prices[col_idx]);\\n        col_out = collateral_equivalent_d18.div(10 ** missing_decimals[col_idx]);\\n        col_out = (col_out.mul(PRICE_PRECISION.sub(buyback_fee[col_idx]))).div(PRICE_PRECISION);\\n        require(col_out >= col_out_min, \\\"Collateral slippage\\\");\\n        FXS.pool_burn_from(msg.sender, fxs_amount);\\n        TransferHelper.safeTransfer(collateral_addresses[col_idx], msg.sender, col_out);\\n        bbkHourlyCum[curEpochHr()] += collateral_equivalent_d18;\\n    }\\n    function recollateralize(uint256 col_idx, uint256 collateral_amount, uint256 fxs_out_min) external collateralEnabled(col_idx) returns (uint256 fxs_out) {\\n        require(recollateralizePaused[col_idx] == false, \\\"Recollat is paused\\\");\\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals[col_idx]);\\n        uint256 fxs_price = getFXSPrice();\\n        uint256 fxs_actually_available = recollatAvailableFxs();\\n        fxs_out = collateral_amount_d18.mul(PRICE_PRECISION.add(bonus_rate).sub(recollat_fee[col_idx])).div(fxs_price);\\n        require(fxs_out <= fxs_actually_available, \\\"Insuf FXS Avail For RCT\\\");\\n        require(fxs_out >= fxs_out_min, \\\"FXS slippage\\\");\\n        require(freeCollatBalance(col_idx).add(collateral_amount) <= pool_ceilings[col_idx], \\\"Pool ceiling\\\");\\n        TransferHelper.safeTransferFrom(collateral_addresses[col_idx], msg.sender, address(this), collateral_amount);\\n        FXS.pool_mint(msg.sender, fxs_out);\\n        rctHourlyCum[curEpochHr()] += fxs_out;\\n    }\\n    function amoMinterBorrow(uint256 collateral_amount) external onlyAMOMinters {\\n        uint256 minter_col_idx = IFraxAMOMinter(msg.sender).col_idx();\\n        require(borrowingPaused[minter_col_idx] == false, \\\"Borrowing is paused\\\");\\n        require(enabled_collaterals[collateral_addresses[minter_col_idx]], \\\"Collateral disabled\\\");\\n        TransferHelper.safeTransfer(collateral_addresses[minter_col_idx], msg.sender, collateral_amount);\\n    }\\n    \\n    function toggleMRBR(uint256 col_idx, uint8 tog_idx) external onlyByOwnGovCust {\\n        if (tog_idx == 0) mintPaused[col_idx] = !mintPaused[col_idx];\\n        else if (tog_idx == 1) redeemPaused[col_idx] = !redeemPaused[col_idx];\\n        else if (tog_idx == 2) buyBackPaused[col_idx] = !buyBackPaused[col_idx];\\n        else if (tog_idx == 3) recollateralizePaused[col_idx] = !recollateralizePaused[col_idx];\\n        else if (tog_idx == 4) borrowingPaused[col_idx] = !borrowingPaused[col_idx];\\n        emit MRBRToggled(col_idx, tog_idx);\\n    }\\n    \\n    function addAMOMinter(address amo_minter_addr) external onlyByOwnGov {\\n        require(amo_minter_addr != address(0), \\\"Zero address detected\\\");\\n        uint256 collat_val_e18 = IFraxAMOMinter(amo_minter_addr).collatDollarBalance();\\n        require(collat_val_e18 >= 0, \\\"Invalid AMO\\\");\\n        amo_minter_addresses[amo_minter_addr] = true;\\n        emit AMOMinterAdded(amo_minter_addr);\\n    }\\n    function removeAMOMinter(address amo_minter_addr) external onlyByOwnGov {\\n        amo_minter_addresses[amo_minter_addr] = false;\\n        \\n        emit AMOMinterRemoved(amo_minter_addr);\\n    }\\n    function setCollateralPrice(uint256 col_idx, uint256 _new_price) external onlyByOwnGov {\\n        collateral_prices[col_idx] = _new_price;\\n        emit CollateralPriceSet(col_idx, _new_price);\\n    }\\n    function toggleCollateral(uint256 col_idx) external onlyByOwnGov {\\n        address col_address = collateral_addresses[col_idx];\\n        enabled_collaterals[col_address] = !enabled_collaterals[col_address];\\n        emit CollateralToggled(col_idx, enabled_collaterals[col_address]);\\n    }\\n    function setPoolCeiling(uint256 col_idx, uint256 new_ceiling) external onlyByOwnGov {\\n        pool_ceilings[col_idx] = new_ceiling;\\n        emit PoolCeilingSet(col_idx, new_ceiling);\\n    }\\n    function setFees(uint256 col_idx, uint256 new_mint_fee, uint256 new_redeem_fee, uint256 new_buyback_fee, uint256 new_recollat_fee) external onlyByOwnGov {\\n        minting_fee[col_idx] = new_mint_fee;\\n        redemption_fee[col_idx] = new_redeem_fee;\\n        buyback_fee[col_idx] = new_buyback_fee;\\n        recollat_fee[col_idx] = new_recollat_fee;\\n        emit FeesSet(col_idx, new_mint_fee, new_redeem_fee, new_buyback_fee, new_recollat_fee);\\n    }\\n    function setPoolParameters(uint256 new_bonus_rate, uint256 new_redemption_delay) external onlyByOwnGov {\\n        bonus_rate = new_bonus_rate;\\n        redemption_delay = new_redemption_delay;\\n        emit PoolParametersSet(new_bonus_rate, new_redemption_delay);\\n    }\\n    function setPriceThresholds(uint256 new_mint_price_threshold, uint256 new_redeem_price_threshold) external onlyByOwnGov {\\n        mint_price_threshold = new_mint_price_threshold;\\n        redeem_price_threshold = new_redeem_price_threshold;\\n        emit PriceThresholdsSet(new_mint_price_threshold, new_redeem_price_threshold);\\n    }\\n    function setBbkRctPerHour(uint256 _bbkMaxColE18OutPerHour, uint256 _rctMaxFxsOutPerHour) external onlyByOwnGov {\\n        bbkMaxColE18OutPerHour = _bbkMaxColE18OutPerHour;\\n        rctMaxFxsOutPerHour = _rctMaxFxsOutPerHour;\\n        emit BbkRctPerHourSet(_bbkMaxColE18OutPerHour, _rctMaxFxsOutPerHour);\\n    }\\n    function setOracles(address _frax_usd_chainlink_addr, address _fxs_usd_chainlink_addr) external onlyByOwnGov {\\n        priceFeedFRAXUSD = AggregatorV3Interface(_frax_usd_chainlink_addr);\\n        priceFeedFXSUSD = AggregatorV3Interface(_fxs_usd_chainlink_addr);\\n        chainlink_frax_usd_decimals = priceFeedFRAXUSD.decimals();\\n        chainlink_fxs_usd_decimals = priceFeedFXSUSD.decimals();\\n        \\n        emit OraclesSet(_frax_usd_chainlink_addr, _fxs_usd_chainlink_addr);\\n    }\\n    function setCustodian(address new_custodian) external onlyByOwnGov {\\n        custodian_address = new_custodian;\\n        emit CustodianSet(new_custodian);\\n    }\\n    function setTimelock(address new_timelock) external onlyByOwnGov {\\n        timelock_address = new_timelock;\\n        emit TimelockSet(new_timelock);\\n    }\\n    \\n    event CollateralToggled(uint256 col_idx, bool new_state);\\n    event PoolCeilingSet(uint256 col_idx, uint256 new_ceiling);\\n    event FeesSet(uint256 col_idx, uint256 new_mint_fee, uint256 new_redeem_fee, uint256 new_buyback_fee, uint256 new_recollat_fee);\\n    event PoolParametersSet(uint256 new_bonus_rate, uint256 new_redemption_delay);\\n    event PriceThresholdsSet(uint256 new_bonus_rate, uint256 new_redemption_delay);\\n    event BbkRctPerHourSet(uint256 bbkMaxColE18OutPerHour, uint256 rctMaxFxsOutPerHour);\\n    event AMOMinterAdded(address amo_minter_addr);\\n    event AMOMinterRemoved(address amo_minter_addr);\\n    event OraclesSet(address frax_usd_chainlink_addr, address fxs_usd_chainlink_addr);\\n    event CustodianSet(address new_custodian);\\n    event TimelockSet(address new_timelock);\\n    event MRBRToggled(uint256 col_idx, uint8 tog_idx);\\n    event CollateralPriceSet(uint256 col_idx, uint256 new_price);\\n}\\ninterface IFraxPool {\\n    function minting_fee() external returns (uint256);\\n    function redeemCollateralBalances(address addr) external returns (uint256);\\n    function redemption_fee() external returns (uint256);\\n    function buyback_fee() external returns (uint256);\\n    function recollat_fee() external returns (uint256);\\n    function collatDollarBalance() external returns (uint256);\\n    function availableExcessCollatDV() external returns (uint256);\\n    function getCollateralPrice() external returns (uint256);\\n    function setCollatETHOracle(address _collateral_weth_oracle_address, address _weth_address) external;\\n    function mint1t1FRAX(uint256 collateral_amount, uint256 FRAX_out_min) external;\\n    function mintAlgorithmicFRAX(uint256 fxs_amount_d18, uint256 FRAX_out_min) external;\\n    function mintFractionalFRAX(uint256 collateral_amount, uint256 fxs_amount, uint256 FRAX_out_min) external;\\n    function redeem1t1FRAX(uint256 FRAX_amount, uint256 COLLATERAL_out_min) external;\\n    function redeemFractionalFRAX(uint256 FRAX_amount, uint256 FXS_out_min, uint256 COLLATERAL_out_min) external;\\n    function redeemAlgorithmicFRAX(uint256 FRAX_amount, uint256 FXS_out_min) external;\\n    function collectRedemption() external;\\n    function recollateralizeFRAX(uint256 collateral_amount, uint256 FXS_out_min) external;\\n    function buyBackFXS(uint256 FXS_amount, uint256 COLLATERAL_out_min) external;\\n    function toggleMinting() external;\\n    function toggleRedeeming() external;\\n    function toggleRecollateralize() external;\\n    function toggleBuyBack() external;\\n    function toggleCollateralPrice(uint256 _new_price) external;\\n    function setPoolParameters(uint256 new_ceiling, uint256 new_bonus_rate, uint256 new_redemption_delay, uint256 new_mint_fee, uint256 new_redeem_fee, uint256 new_buyback_fee, uint256 new_recollat_fee) external;\\n    function setTimelock(address new_timelock) external;\\n    function setOwner(address _owner_address) external;\\n}\\npragma experimental ABIEncoderV2;\\ninterface IAMO {\\n    function dollarBalances() external view returns (uint256 frax_val_e18, uint256 collat_val_e18);\\n}\\ncontract FraxAMOMinter is Owned {\\n    \\n    IFrax public FRAX = IFrax(0x853d955aCEf822Db058eb8505911ED77F175b99e);\\n    IFxs public FXS = IFxs(0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0);\\n    ERC20 public collateral_token;\\n    FraxPoolV3 public pool = FraxPoolV3(0x2fE065e6FFEf9ac95ab39E5042744d695F560729);\\n    IFraxPool public old_pool = IFraxPool(0x1864Ca3d47AaB98Ee78D11fc9DCC5E7bADdA1c0d);\\n    address public timelock_address;\\n    address public custodian_address;\\n    address public collateral_address;\\n    uint256 public col_idx;\\n    address[] public amos_array;\\n    mapping(address => bool) public amos;\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    int256 public collat_borrow_cap = int256(10000000e6);\\n    int256 public frax_mint_cap = int256(100000000e18);\\n    int256 public fxs_mint_cap = int256(100000000e18);\\n    uint256 public min_cr = 810000;\\n    mapping(address => int256) public frax_mint_balances;\\n    int256 public frax_mint_sum = 0;\\n    mapping(address => int256) public fxs_mint_balances;\\n    int256 public fxs_mint_sum = 0;\\n    mapping(address => int256) public collat_borrowed_balances;\\n    int256 public collat_borrowed_sum = 0;\\n    uint256 public fraxDollarBalanceStored = 0;\\n    uint256 public missing_decimals;\\n    uint256 public collatDollarBalanceStored = 0;\\n    mapping(address => int256[2]) public correction_offsets_amos;\\n    \\n    \\n    constructor (\\n        address _owner_address,\\n        address _custodian_address,\\n        address _timelock_address,\\n        address _collateral_address,\\n        address _pool_address\\n    ) Owned(_owner_address) {\\n        custodian_address = _custodian_address;\\n        timelock_address = _timelock_address;\\n        pool = FraxPoolV3(_pool_address);\\n        collateral_address = _collateral_address;\\n        col_idx = pool.collateralAddrToIdx(_collateral_address);\\n        collateral_token = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n        missing_decimals = uint(18) - collateral_token.decimals();\\n    }\\n    \\n    modifier onlyByOwnGov() {\\n        require(msg.sender == timelock_address || msg.sender == owner, \\\"Not owner or timelock\\\");\\n        _;\\n    }\\n    modifier validAMO(address amo_address) {\\n        require(amos[amo_address], \\\"Invalid AMO\\\");\\n        _;\\n    }\\n    \\n    function collatDollarBalance() external view returns (uint256) {\\n        (, uint256 collat_val_e18) = dollarBalances();\\n        return collat_val_e18;\\n    }\\n    function dollarBalances() public view returns (uint256 frax_val_e18, uint256 collat_val_e18) {\\n        frax_val_e18 = fraxDollarBalanceStored;\\n        collat_val_e18 = collatDollarBalanceStored;\\n    }\\n    function allAMOAddresses() external view returns (address[] memory) {\\n        return amos_array;\\n    }\\n    function allAMOsLength() external view returns (uint256) {\\n        return amos_array.length;\\n    }\\n    function fraxTrackedGlobal() external view returns (int256) {\\n        return int256(fraxDollarBalanceStored) - frax_mint_sum - (collat_borrowed_sum * int256(10 ** missing_decimals));\\n    }\\n    function fraxTrackedAMO(address amo_address) external view returns (int256) {\\n        (uint256 frax_val_e18, ) = IAMO(amo_address).dollarBalances();\\n        int256 frax_val_e18_corrected = int256(frax_val_e18) + correction_offsets_amos[amo_address][0];\\n        return frax_val_e18_corrected - frax_mint_balances[amo_address] - ((collat_borrowed_balances[amo_address]) * int256(10 ** missing_decimals));\\n    }\\n    \\n    function syncDollarBalances() public {\\n        uint256 total_frax_value_d18 = 0;\\n        uint256 total_collateral_value_d18 = 0; \\n        for (uint i = 0; i < amos_array.length; i++){ \\n            address amo_address = amos_array[i];\\n            if (amo_address != address(0)){\\n                (uint256 frax_val_e18, uint256 collat_val_e18) = IAMO(amo_address).dollarBalances();\\n                total_frax_value_d18 += uint256(int256(frax_val_e18) + correction_offsets_amos[amo_address][0]);\\n                total_collateral_value_d18 += uint256(int256(collat_val_e18) + correction_offsets_amos[amo_address][1]);\\n            }\\n        }\\n        fraxDollarBalanceStored = total_frax_value_d18;\\n        collatDollarBalanceStored = total_collateral_value_d18;\\n    }\\n    \\n    function oldPoolRedeem(uint256 frax_amount) external onlyByOwnGov {\\n        uint256 redemption_fee = old_pool.redemption_fee();\\n        uint256 col_price_usd = old_pool.getCollateralPrice();\\n        uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\\n        uint256 redeem_amount_E6 = ((frax_amount * (uint256(1e6) - redemption_fee)) / 1e6) / (10 ** missing_decimals);\\n        uint256 expected_collat_amount = (redeem_amount_E6 * global_collateral_ratio) / 1e6;\\n        expected_collat_amount = (expected_collat_amount * 1e6) / col_price_usd;\\n        require((collat_borrowed_sum + int256(expected_collat_amount)) <= collat_borrow_cap, \\\"Borrow cap\\\");\\n        collat_borrowed_sum += int256(expected_collat_amount);\\n        FRAX.pool_mint(address(this), frax_amount);\\n        FRAX.approve(address(old_pool), frax_amount);\\n        old_pool.redeemFractionalFRAX(frax_amount, 0, 0);\\n    }\\n    function oldPoolCollectAndGive(address destination_amo) external onlyByOwnGov validAMO(destination_amo) {\\n        uint256 collat_amount = old_pool.redeemCollateralBalances(address(this));\\n        \\n        old_pool.collectRedemption();\\n        collat_borrowed_balances[destination_amo] += int256(collat_amount);\\n        TransferHelper.safeTransfer(collateral_address, destination_amo, collat_amount);\\n        syncDollarBalances();\\n    }\\n    \\n    function mintFraxForAMO(address destination_amo, uint256 frax_amount) external onlyByOwnGov validAMO(destination_amo) {\\n        int256 frax_amt_i256 = int256(frax_amount);\\n        require((frax_mint_sum + frax_amt_i256) <= frax_mint_cap, \\\"Mint cap reached\\\");\\n        frax_mint_balances[destination_amo] += frax_amt_i256;\\n        frax_mint_sum += frax_amt_i256;\\n        uint256 current_collateral_E18 = FRAX.globalCollateralValue();\\n        uint256 cur_frax_supply = FRAX.totalSupply();\\n        uint256 new_frax_supply = cur_frax_supply + frax_amount;\\n        uint256 new_cr = (current_collateral_E18 * PRICE_PRECISION) / new_frax_supply;\\n        require(new_cr >= min_cr, \\\"CR would be too low\\\");\\n        FRAX.pool_mint(destination_amo, frax_amount);\\n        syncDollarBalances();\\n    }\\n    function burnFraxFromAMO(uint256 frax_amount) external validAMO(msg.sender) {\\n        int256 frax_amt_i256 = int256(frax_amount);\\n        FRAX.pool_burn_from(msg.sender, frax_amount);\\n        frax_mint_balances[msg.sender] -= frax_amt_i256;\\n        frax_mint_sum -= frax_amt_i256;\\n        syncDollarBalances();\\n    }\\n    function mintFxsForAMO(address destination_amo, uint256 fxs_amount) external onlyByOwnGov validAMO(destination_amo) {\\n        int256 fxs_amt_i256 = int256(fxs_amount);\\n        require((fxs_mint_sum + fxs_amt_i256) <= fxs_mint_cap, \\\"Mint cap reached\\\");\\n        fxs_mint_balances[destination_amo] += fxs_amt_i256;\\n        fxs_mint_sum += fxs_amt_i256;\\n        FXS.pool_mint(destination_amo, fxs_amount);\\n        syncDollarBalances();\\n    }\\n    function burnFxsFromAMO(uint256 fxs_amount) external validAMO(msg.sender) {\\n        int256 fxs_amt_i256 = int256(fxs_amount);\\n        FXS.pool_burn_from(msg.sender, fxs_amount);\\n        fxs_mint_balances[msg.sender] -= fxs_amt_i256;\\n        fxs_mint_sum -= fxs_amt_i256;\\n        syncDollarBalances();\\n    }\\n    function giveCollatToAMO(\\n        address destination_amo,\\n        uint256 collat_amount\\n    ) external onlyByOwnGov validAMO(destination_amo) {\\n        int256 collat_amount_i256 = int256(collat_amount);\\n        require((collat_borrowed_sum + collat_amount_i256) <= collat_borrow_cap, \\\"Borrow cap\\\");\\n        collat_borrowed_balances[destination_amo] += collat_amount_i256;\\n        collat_borrowed_sum += collat_amount_i256;\\n        pool.amoMinterBorrow(collat_amount);\\n        TransferHelper.safeTransfer(collateral_address, destination_amo, collat_amount);\\n        syncDollarBalances();\\n    }\\n    function receiveCollatFromAMO(uint256 usdc_amount) external validAMO(msg.sender) {\\n        int256 collat_amt_i256 = int256(usdc_amount);\\n        TransferHelper.safeTransferFrom(collateral_address, msg.sender, address(pool), usdc_amount);\\n        collat_borrowed_balances[msg.sender] -= collat_amt_i256;\\n        collat_borrowed_sum -= collat_amt_i256;\\n        syncDollarBalances();\\n    }\\n    \\n    function addAMO(address amo_address, bool sync_too) public onlyByOwnGov {\\n        require(amo_address != address(0), \\\"Zero address detected\\\");\\n        (uint256 frax_val_e18, uint256 collat_val_e18) = IAMO(amo_address).dollarBalances();\\n        require(frax_val_e18 >= 0 && collat_val_e18 >= 0, \\\"Invalid AMO\\\");\\n        require(amos[amo_address] == false, \\\"Address already exists\\\");\\n        amos[amo_address] = true; \\n        amos_array.push(amo_address);\\n        frax_mint_balances[amo_address] = 0;\\n        fxs_mint_balances[amo_address] = 0;\\n        collat_borrowed_balances[amo_address] = 0;\\n        correction_offsets_amos[amo_address][0] = 0;\\n        correction_offsets_amos[amo_address][1] = 0;\\n        if (sync_too) syncDollarBalances();\\n        emit AMOAdded(amo_address);\\n    }\\n    function removeAMO(address amo_address, bool sync_too) public onlyByOwnGov {\\n        require(amo_address != address(0), \\\"Zero address detected\\\");\\n        require(amos[amo_address] == true, \\\"Address nonexistant\\\");\\n        \\n        delete amos[amo_address];\\n        for (uint i = 0; i < amos_array.length; i++){ \\n            if (amos_array[i] == amo_address) {\\n                amos_array[i] = address(0);\\n                break;\\n            }\\n        }\\n        if (sync_too) syncDollarBalances();\\n        emit AMORemoved(amo_address);\\n    }\\n    function setTimelock(address new_timelock) external onlyByOwnGov {\\n        require(new_timelock != address(0), \\\"Timelock address cannot be 0\\\");\\n        timelock_address = new_timelock;\\n    }\\n    function setCustodian(address _custodian_address) external onlyByOwnGov {\\n        require(_custodian_address != address(0), \\\"Custodian address cannot be 0\\\");        \\n        custodian_address = _custodian_address;\\n    }\\n    function setFraxMintCap(uint256 _frax_mint_cap) external onlyByOwnGov {\\n        frax_mint_cap = int256(_frax_mint_cap);\\n    }\\n    function setFxsMintCap(uint256 _fxs_mint_cap) external onlyByOwnGov {\\n        fxs_mint_cap = int256(_fxs_mint_cap);\\n    }\\n    function setCollatBorrowCap(uint256 _collat_borrow_cap) external onlyByOwnGov {\\n        collat_borrow_cap = int256(_collat_borrow_cap);\\n    }\\n    function setMinimumCollateralRatio(uint256 _min_cr) external onlyByOwnGov {\\n        min_cr = _min_cr;\\n    }\\n    function setAMOCorrectionOffsets(address amo_address, int256 frax_e18_correction, int256 collat_e18_correction) external onlyByOwnGov {\\n        correction_offsets_amos[amo_address][0] = frax_e18_correction;\\n        correction_offsets_amos[amo_address][1] = collat_e18_correction;\\n        syncDollarBalances();\\n    }\\n    function setFraxPool(address _pool_address) external onlyByOwnGov {\\n        pool = FraxPoolV3(_pool_address);\\n        require(pool.collateralAddrToIdx(collateral_address) == col_idx, \\\"col_idx mismatch\\\");\\n    }\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\\n        TransferHelper.safeTransfer(tokenAddress, owner, tokenAmount);\\n        \\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyByOwnGov returns (bool, bytes memory) {\\n        (bool success, bytes memory result) = _to.call{value:_value}(_data);\\n        return (success, result);\\n    }\\n    \\n    event AMOAdded(address amo_address);\\n    event AMORemoved(address amo_address);\\n    event Recovered(address token, uint256 amount);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n    \\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    \\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\ninterface ICrossChainOracle {\\n    function getPrice(address token_address) external view returns (uint256 token_price);\\n}\\ninterface ICrossChainAMO {\\n    function allDollarBalances() external view returns (uint256 frax_val_e18, uint256 fxs_val_e18, uint256 collat_val_e18, uint256 total_val_e18);\\n}\\ncontract CrossChainBridgeBacker is Owned {\\n    using SafeERC20 for ERC20;\\n    \\n    IAnyswapV4ERC20 public anyFRAX;\\n    CrossChainCanonical public canFRAX;\\n    IAnyswapV4ERC20 public anyFXS;\\n    CrossChainCanonical public canFXS;\\n    ERC20 public collateral_token;\\n    ICrossChainOracle public cross_chain_oracle;\\n    address public timelock_address;\\n    address[] public amos_array;\\n    mapping(address => bool) public eoa_amos;\\n    mapping(address => bool) public amos;\\n    \\n    string public name;\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    address[3] public bridge_addresses;\\n    address public destination_address_override;\\n    string public non_evm_destination_address;\\n    mapping(address => uint256) public frax_lent_balances;\\n    uint256 public frax_lent_sum = 0;\\n    uint256 public frax_bridged_back_sum = 0;\\n    mapping(address => uint256) public fxs_lent_balances;\\n    uint256 public fxs_lent_sum = 0;\\n    uint256 public fxs_bridged_back_sum = 0;\\n    mapping(address => uint256) public collat_lent_balances;\\n    uint256 public collat_lent_sum = 0;\\n    uint256 public collat_bridged_back_sum = 0;\\n    uint256 public missing_decimals;\\n    \\n    modifier onlyByOwnGov() {\\n        require(msg.sender == owner || msg.sender == timelock_address, \\\"Not owner or timelock\\\");\\n        _;\\n    }\\n    modifier validAMO(address amo_address) {\\n        require(amos[amo_address], \\\"Invalid AMO\\\");\\n        _;\\n    }\\n    modifier validCanonicalToken(address token_address) {\\n        require (\\n                token_address == address(canFRAX) || \\n                token_address == address(canFXS) ||\\n                token_address == address(collateral_token), \\\"Invalid canonical token\\\"\\n            );\\n        _;\\n    }\\n    \\n    constructor (\\n        address _owner,\\n        address _timelock_address,\\n        address _cross_chain_oracle_address,\\n        address[5] memory _token_addresses,\\n        address[3] memory _bridge_addresses,\\n        address _destination_address_override,\\n        string memory _non_evm_destination_address,\\n        string memory _name\\n    ) Owned(_owner) {\\n        timelock_address = _timelock_address;\\n        cross_chain_oracle = ICrossChainOracle(_cross_chain_oracle_address);\\n        anyFRAX = IAnyswapV4ERC20(_token_addresses[0]);\\n        canFRAX = CrossChainCanonical(_token_addresses[1]);\\n        anyFXS = IAnyswapV4ERC20(_token_addresses[2]);\\n        canFXS = CrossChainCanonical(_token_addresses[3]);\\n        collateral_token = ERC20(_token_addresses[4]);\\n        missing_decimals = uint(18) - collateral_token.decimals();\\n        bridge_addresses = _bridge_addresses;\\n        destination_address_override = _destination_address_override;\\n        non_evm_destination_address = _non_evm_destination_address;\\n        name = _name;\\n        amos[address(this)] = true; \\n        amos_array.push(address(this));\\n        frax_lent_balances[address(this)] = 0;\\n        fxs_lent_balances[address(this)] = 0;\\n        collat_lent_balances[address(this)] = 0;\\n    }\\n    \\n    function allAMOAddresses() external view returns (address[] memory) {\\n        return amos_array;\\n    }\\n    function allAMOsLength() external view returns (uint256) {\\n        return amos_array.length;\\n    }\\n    function getTokenType(address token_address) public view returns (uint256) {\\n        if (token_address == address(anyFRAX) || token_address == address(canFRAX)) return 0;\\n        else if (token_address == address(anyFXS) || token_address == address(canFXS)) return 1;\\n        else if (token_address == address(collateral_token)) return 2;\\n        revert(\\\"getTokenType: Invalid token\\\");\\n    }\\n    function showTokenBalances() public view returns (uint256[5] memory tkn_bals) {\\n        tkn_bals[0] = anyFRAX.balanceOf(address(this));\\n        tkn_bals[1] = canFRAX.balanceOf(address(this));\\n        tkn_bals[2] = anyFXS.balanceOf(address(this));\\n        tkn_bals[3] = canFXS.balanceOf(address(this));\\n        tkn_bals[4] = collateral_token.balanceOf(address(this));\\n    }\\n    function showAllocations() public view returns (uint256[12] memory allocations) {\\n        uint256[5] memory tkn_bals = showTokenBalances();\\n        allocations[0] = tkn_bals[0] + tkn_bals[1];\\n        allocations[1] = frax_lent_sum;\\n        allocations[2] = allocations[0] + allocations[1];\\n        allocations[3] = tkn_bals[2] + tkn_bals[3];\\n        allocations[4] = fxs_lent_sum;\\n        allocations[5] = allocations[3] + allocations[4];\\n        allocations[6] = (allocations[5] * (cross_chain_oracle.getPrice(address(canFXS)))) / PRICE_PRECISION;\\n        allocations[7] = tkn_bals[4];\\n        allocations[8] = collat_lent_sum;\\n        allocations[9] = allocations[7] + allocations[8];\\n        allocations[10] = allocations[9] * (10 ** missing_decimals);\\n    \\n        allocations[11] = allocations[2] + allocations[6] + allocations[10];\\n    }\\n    function allBalances() public view returns (\\n        uint256 frax_ttl, \\n        uint256 fxs_ttl,\\n        uint256 col_ttl,\\n        uint256 ttl_val_usd_e18\\n    ) {\\n        uint256[12] memory allocations = showAllocations();\\n        frax_ttl = allocations[2];\\n        fxs_ttl = allocations[5];\\n        col_ttl = allocations[9];\\n        ttl_val_usd_e18 = allocations[11];\\n        for (uint i = 1; i < amos_array.length; i++){ \\n            if (amos_array[i] != address(0) && !eoa_amos[amos_array[i]]){\\n                (\\n                    uint256 frax_bal, \\n                    uint256 fxs_bal, \\n                    uint256 collat_bal,\\n                    uint256 total_val_e18\\n                ) = ICrossChainAMO(amos_array[i]).allDollarBalances();\\n                frax_ttl += frax_bal;\\n                fxs_ttl += fxs_bal;\\n                col_ttl += collat_bal;\\n                ttl_val_usd_e18 += total_val_e18;\\n            }\\n        }\\n    }\\n    \\n    function selfBridge(uint256 token_type, uint256 token_amount, bool do_swap) external onlyByOwnGov {\\n        require(token_type == 0 || token_type == 1 || token_type == 2, 'Invalid token type');\\n        _receiveBack(address(this), token_type, token_amount, true, do_swap);\\n    }\\n    function receiveBackViaAMO(address canonical_token_address, uint256 token_amount, bool do_bridging) external validCanonicalToken(canonical_token_address) validAMO(msg.sender) {\\n        TransferHelper.safeTransferFrom(canonical_token_address, msg.sender, address(this), token_amount);\\n        uint256 token_type = getTokenType(canonical_token_address); \\n        _receiveBack(msg.sender, token_type, token_amount, do_bridging, true);\\n    }\\n    function _receiveBack(address from_address, uint256 token_type, uint256 token_amount, bool do_bridging, bool do_swap) internal {\\n        if (do_bridging) {\\n            if (token_type == 0) {\\n                if (do_swap) _swapCanonicalForAny(0, token_amount);\\n            }\\n            else if (token_type == 1){\\n                if (do_swap) _swapCanonicalForAny(1, token_amount);\\n            }\\n            address address_to_send_to = address(this);\\n            if (destination_address_override != address(0)) address_to_send_to = destination_address_override;\\n            _bridgingLogic(token_type, address_to_send_to, token_amount);\\n        }\\n        if (token_type == 0){\\n            if (token_amount >= frax_lent_balances[from_address]) frax_lent_balances[from_address] = 0;\\n            else frax_lent_balances[from_address] -= token_amount;\\n            if (token_amount >= frax_lent_sum) frax_lent_sum = 0;\\n            else frax_lent_sum -= token_amount;\\n            if (do_bridging) frax_bridged_back_sum += token_amount;\\n        }\\n        else if (token_type == 1){\\n            if (token_amount >= fxs_lent_balances[from_address]) fxs_lent_balances[from_address] = 0;\\n            else fxs_lent_balances[from_address] -= token_amount;\\n            if (token_amount >= fxs_lent_sum) fxs_lent_sum = 0;\\n            else fxs_lent_sum -= token_amount;\\n            if (do_bridging) fxs_bridged_back_sum += token_amount;\\n        }\\n        else {\\n            if (token_amount >= collat_lent_balances[from_address]) collat_lent_balances[from_address] = 0;\\n            else collat_lent_balances[from_address] -= token_amount;\\n            if (token_amount >= collat_lent_sum) collat_lent_sum = 0;\\n            else collat_lent_sum -= token_amount;\\n            if (do_bridging) collat_bridged_back_sum += token_amount;\\n        }\\n    }\\n    function _bridgingLogic(uint256 token_type, address address_to_send_to, uint256 token_amount) internal virtual {\\n        revert(\\\"Need bridging logic\\\");\\n    }\\n    \\n    function lendFraxToAMO(address destination_amo, uint256 frax_amount) external onlyByOwnGov validAMO(destination_amo) {\\n        frax_lent_balances[destination_amo] += frax_amount;\\n        frax_lent_sum += frax_amount;\\n        TransferHelper.safeTransfer(address(canFRAX), destination_amo, frax_amount);\\n    }\\n    function lendFxsToAMO(address destination_amo, uint256 fxs_amount) external onlyByOwnGov validAMO(destination_amo) {\\n        fxs_lent_balances[destination_amo] += fxs_amount;\\n        fxs_lent_sum += fxs_amount;\\n        TransferHelper.safeTransfer(address(canFXS), destination_amo, fxs_amount);\\n    }\\n    function lendCollatToAMO(address destination_amo, uint256 collat_amount) external onlyByOwnGov validAMO(destination_amo) {\\n        collat_lent_balances[destination_amo] += collat_amount;\\n        collat_lent_sum += collat_amount;\\n        TransferHelper.safeTransfer(address(collateral_token), destination_amo, collat_amount);\\n    }\\n    \\n    \\n    function swapAnyForCanonical(uint256 token_type, uint256 token_amount) external onlyByOwnGov {\\n        _swapAnyForCanonical(token_type, token_amount);\\n    }\\n    function _swapAnyForCanonical(uint256 token_type, uint256 token_amount) internal {\\n        if (token_type == 0) {\\n            anyFRAX.approve(address(canFRAX), token_amount);\\n            canFRAX.exchangeOldForCanonical(address(anyFRAX), token_amount);\\n        }\\n        else {\\n            anyFXS.approve(address(canFXS), token_amount);\\n            canFXS.exchangeOldForCanonical(address(anyFXS), token_amount);\\n        }\\n    }\\n    function swapCanonicalForAny(uint256 token_type, uint256 token_amount) external onlyByOwnGov {\\n        _swapCanonicalForAny(token_type, token_amount);\\n    }\\n    function _swapCanonicalForAny(uint256 token_type, uint256 token_amount) internal {\\n        if (token_type == 0) {\\n            canFRAX.approve(address(canFRAX), token_amount);\\n            canFRAX.exchangeCanonicalForOld(address(anyFRAX), token_amount);\\n        }\\n        else {\\n            canFXS.approve(address(canFXS), token_amount);\\n            canFXS.exchangeCanonicalForOld(address(anyFXS), token_amount);\\n        }\\n    }\\n    function giveAnyToCan(uint256 token_type, uint256 token_amount) external onlyByOwnGov {\\n        if (token_type == 0) {\\n            TransferHelper.safeTransfer(address(anyFRAX), address(canFRAX), token_amount);\\n        }\\n        else {\\n            TransferHelper.safeTransfer(address(anyFXS), address(canFXS), token_amount);\\n        }\\n    }\\n    function mintCanonicalFrax(uint256 frax_amount) external onlyByOwnGov {\\n        canFRAX.minter_mint(address(this), frax_amount);\\n    }\\n    function burnCanonicalFrax(uint256 frax_amount) external onlyByOwnGov {\\n        canFRAX.minter_burn(frax_amount);\\n    }\\n    function mintCanonicalFxs(uint256 fxs_amount) external onlyByOwnGov {\\n        canFXS.minter_mint(address(this), fxs_amount);\\n    }\\n    function burnCanonicalFxs(uint256 fxs_amount) external onlyByOwnGov {\\n        canFXS.minter_burn(fxs_amount);\\n    }\\n    \\n    function collectBridgeTokens(uint256 token_type, address bridge_token_address, uint256 token_amount) external onlyByOwnGov {\\n        if (token_type == 0) {\\n            canFRAX.withdrawBridgeTokens(bridge_token_address, token_amount);\\n        }\\n        else if (token_type == 1) {\\n            canFXS.withdrawBridgeTokens(bridge_token_address, token_amount);\\n        }\\n        else {\\n            revert(\\\"Invalid token_type\\\");\\n        }\\n    }\\n    \\n    function addAMO(address amo_address, bool is_eoa) external onlyByOwnGov {\\n        require(amo_address != address(0), \\\"Zero address detected\\\");\\n        if (is_eoa) {\\n            eoa_amos[amo_address] = true;\\n        }\\n        else {\\n            (uint256 frax_val_e18, uint256 fxs_val_e18, uint256 collat_val_e18, uint256 total_val_e18) = ICrossChainAMO(amo_address).allDollarBalances();\\n            require(frax_val_e18 >= 0 && fxs_val_e18 >= 0 && collat_val_e18 >= 0 && total_val_e18 >= 0, \\\"Invalid AMO\\\");\\n        }\\n        require(amos[amo_address] == false, \\\"Address already exists\\\");\\n        amos[amo_address] = true; \\n        amos_array.push(amo_address);\\n        frax_lent_balances[amo_address] = 0;\\n        fxs_lent_balances[amo_address] = 0;\\n        collat_lent_balances[amo_address] = 0;\\n        emit AMOAdded(amo_address);\\n    }\\n    function removeAMO(address amo_address) external onlyByOwnGov {\\n        require(amo_address != address(0), \\\"Zero address detected\\\");\\n        require(amos[amo_address] == true, \\\"Address nonexistant\\\");\\n        \\n        delete amos[amo_address];\\n        for (uint i = 0; i < amos_array.length; i++){ \\n            if (amos_array[i] == amo_address) {\\n                amos_array[i] = address(0);\\n                break;\\n            }\\n        }\\n        emit AMORemoved(amo_address);\\n    }\\n    \\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\\n        TransferHelper.safeTransfer(tokenAddress, owner, tokenAmount);\\n        emit RecoveredERC20(tokenAddress, tokenAmount);\\n    }\\n    function setOracleAddress(address _new_cc_oracle_address) external onlyByOwnGov {\\n        cross_chain_oracle = ICrossChainOracle(_new_cc_oracle_address);\\n    }\\n    function setTimelock(address _new_timelock) external onlyByOwnGov {\\n        timelock_address = _new_timelock;\\n    }\\n    function setBridgeInfo(\\n        address _frax_bridge_address, \\n        address _fxs_bridge_address, \\n        address _collateral_bridge_address, \\n        address _destination_address_override, \\n        string memory _non_evm_destination_address\\n    ) external onlyByOwnGov {\\n        require(\\n            _frax_bridge_address != address(0) && \\n            _fxs_bridge_address != address(0) &&\\n            _collateral_bridge_address != address(0)\\n        , \\\"Invalid bridge address\\\");\\n        bridge_addresses = [_frax_bridge_address, _fxs_bridge_address, _collateral_bridge_address];\\n        \\n        destination_address_override = _destination_address_override;\\n        non_evm_destination_address = _non_evm_destination_address;\\n        \\n        emit BridgeInfoChanged(_frax_bridge_address, _fxs_bridge_address, _collateral_bridge_address, _destination_address_override, _non_evm_destination_address);\\n    }\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyByOwnGov returns (bool, bytes memory) {\\n        (bool success, bytes memory result) = _to.call{value:_value}(_data);\\n        return (success, result);\\n    }\\n    \\n    event AMOAdded(address amo_address);\\n    event AMORemoved(address amo_address);\\n    event RecoveredERC20(address token, uint256 amount);\\n    event BridgeInfoChanged(address frax_bridge_address, address fxs_bridge_address, address collateral_bridge_address, address destination_address_override, string non_evm_destination_address);\\n}\\ninterface IBridgeRouter {\\n  function PRE_FILL_FEE_DENOMINATOR() external view returns (uint256);\\n  function PRE_FILL_FEE_NUMERATOR() external view returns (uint256);\\n  function VERSION() external view returns (uint8);\\n  function enrollCustom(uint32 _domain, bytes32 _id, address _custom) external;\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external;\\n  function handle(uint32 _origin, uint32 _nonce, bytes32 _sender, bytes memory _message) external;\\n  function initialize(address _tokenRegistry, address _xAppConnectionManager) external;\\n  function liquidityProvider(bytes32) external view returns (address);\\n  function migrate(address _oldRepr) external;\\n  function owner() external view returns (address);\\n  function preFill(uint32 _origin, uint32 _nonce, bytes memory _message) external;\\n  function remotes(uint32) external view returns (bytes32);\\n  function renounceOwnership() external;\\n  function send(address _token, uint256 _amount, uint32 _destination, bytes32 _recipient, bool _enableFast) external;\\n  function setXAppConnectionManager(address _xAppConnectionManager) external;\\n  function tokenRegistry() external view returns (address);\\n  function transferOwnership(address newOwner) external;\\n  function xAppConnectionManager() external view returns (address);\\n}\\ncontract CrossChainBridgeBacker_EVMOS_Nomad is CrossChainBridgeBacker {\\n    uint32 public destination = 6648936;\\n    bytes32 public recipient;\\n    constructor (\\n        address _owner,\\n        address _timelock_address,\\n        address _cross_chain_oracle_address,\\n        address[5] memory _token_addresses,\\n        address[3] memory _bridge_addresses,\\n        address _destination_address_override,\\n        string memory _non_evm_destination_address,\\n        string memory _name\\n    ) \\n    CrossChainBridgeBacker(_owner, _timelock_address, _cross_chain_oracle_address, _token_addresses, _bridge_addresses, _destination_address_override, _non_evm_destination_address, _name)\\n    {}\\n    function setDestination(uint32 _destination) external onlyByOwnGov {\\n        destination = _destination;\\n    }\\n    function setRecipient(bytes32 _recipient) external onlyByOwnGov {\\n        recipient = _recipient;\\n    }\\n    function _bridgingLogic(uint256 token_type, address address_to_send_to, uint256 token_amount) internal override {\\n        if (token_type == 0){\\n            anyFRAX.approve(bridge_addresses[token_type], token_amount);\\n            IBridgeRouter(bridge_addresses[token_type]).send(address(anyFRAX), token_amount, destination, recipient, false);\\n        }\\n        else if (token_type == 1) {\\n            anyFRAX.approve(bridge_addresses[token_type], token_amount);\\n            IBridgeRouter(bridge_addresses[token_type]).send(address(anyFXS), token_amount, destination, recipient, false);\\n        }\\n        else {\\n            anyFRAX.approve(bridge_addresses[token_type], token_amount);\\n            IBridgeRouter(bridge_addresses[token_type]).send(address(collateral_token), token_amount, destination, recipient, false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b6d0a30a8044693ee223a7e55032b2d1193841f3670d24965bc8a27bec0966f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060138190556014819055601681905560178190556019819055601a55601c805463ffffffff1916626574681790553480156200004157600080fd5b5060405162005325380380620053258339810160408190526200006491620005da565b8787878787878787876001600160a01b038116620000c85760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a150600880546001600160a01b038981166001600160a01b03199283161790925560078054898416908316179055865160028054831691841691909117905560208088015160038054841691851691909117905560408089015160048054851691861691909117815560608a015160058054861691871691909117905560808a0151600680549095169516948517909355805163313ce56760e01b8152905163313ce5679382810193928290030181865afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002089190620006cb565b620002189060ff166012620006f7565b601b556200022a600d85600362000303565b50601080546001600160a01b0319166001600160a01b03851617905581516200025b90601190602085019062000360565b5080516200027190600c90602084019062000360565b5050306000818152600b60209081526040808320805460ff191660019081179091556009805491820190557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916851790559282526012815282822082905560158152828220829055601890529081205550620007599d5050505050505050505050505050565b82600381019282156200034e579160200282015b828111156200034e57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000317565b506200035c929150620003dd565b5090565b8280546200036e906200071d565b90600052602060002090601f0160209004810192826200039257600085556200034e565b82601f10620003ad57805160ff19168380011785556200034e565b828001600101855582156200034e579182015b828111156200034e578251825591602001919060010190620003c0565b5b808211156200035c5760008155600101620003de565b80516001600160a01b03811681146200040c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000452576200045262000411565b604052919050565b60405160009060a081016001600160401b038111828210171562000482576200048262000411565b60405290508060a08301848111156200049a57600080fd5b835b81811015620004bf57620004b081620003f4565b8352602092830192016200049c565b50505092915050565b600082601f830112620004da57600080fd5b604051606081016001600160401b0381118282101715620004ff57620004ff62000411565b6040528060608401858111156200051557600080fd5b845b818110156200053a576200052b81620003f4565b83526020928301920162000517565b509195945050505050565b600082601f8301126200055757600080fd5b81516001600160401b0381111562000573576200057362000411565b602062000589601f8301601f1916820162000427565b82815285828487010111156200059e57600080fd5b60005b83811015620005be578581018301518282018401528201620005a1565b83811115620005d05760008385840101525b5095945050505050565b6000806000806000806000806101c0898b031215620005f857600080fd5b6200060389620003f4565b97506200061360208a01620003f4565b96506200062360408a01620003f4565b955089607f8a01126200063557600080fd5b620006448a60608b016200045a565b9450620006568a6101008b01620004c8565b9350620006676101608a01620003f4565b6101808a01519093506001600160401b03808211156200068657600080fd5b620006948c838d0162000545565b93506101a08b0151915080821115620006ac57600080fd5b50620006bb8b828c0162000545565b9150509295985092959890939650565b600060208284031215620006de57600080fd5b815160ff81168114620006f057600080fd5b9392505050565b6000828210156200071857634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200073257607f821691505b6020821081036200075357634e487b7160e01b600052602260045260246000fd5b50919050565b614bbc80620007696000396000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c806379ba5097116101de578063bda767ab1161010f578063dedb8840116100ad578063e697af7f1161007c578063e697af7f14610871578063e7735c7e1461087a578063e9967ee11461088d578063eb33e4a9146108a057600080fd5b8063dedb884014610823578063e05261ec14610836578063e23f23181461084b578063e2b4a4ec1461085e57600080fd5b8063d7e0ebb3116100e9578063d7e0ebb3146107bd578063da92c9e6146107d0578063dc6663c7146107f0578063ddfbbf2f1461081057600080fd5b8063bda767ab1461077f578063bdacb303146107a2578063cd71678e146107b557600080fd5b8063919e06ce1161017c578063b134b77011610156578063b134b77014610706578063b269681d14610719578063b61d27f61461073e578063b703ac271461075f57600080fd5b8063919e06ce146106cd57806393272baf146106e057806394582327146106f357600080fd5b80638872e567116101b85780638872e567146106715780638980f11f1461067a5780638d7732031461068d5780638da5cb5b146106ad57600080fd5b806379ba5097146106345780637e34026e1461063c578063837184fe1461065157600080fd5b8063477a3bd1116102c3578063555b616211610261578063640ff7a911610230578063640ff7a9146105f0578063655cfd6d1461060557806366d003ac146106185780637565673a1461062157600080fd5b8063555b61621461058f5780635eccfeba146105b75780636007b3c0146105ca5780636230469d146105dd57600080fd5b80634e8a0f671161029d5780634e8a0f671461053357806351aa64491461053c5780635242e71d1461054f57806353a47bb71461056f57600080fd5b8063477a3bd1146104ed57806349696b201461050d5780634c69c00f1461052057600080fd5b80633001f398116103305780633906f1811161030a5780633906f181146104a95780633ed4e55c146104c9578063408e63bf146104d257806344b7742c146104da57600080fd5b80633001f3981461047757806333f8486f146104975780633452ae2a146104a057600080fd5b806320db46841161036c57806320db4684146103d9578063228d0b68146104115780632621db2f146104245780632d9e6bfa1461044457600080fd5b8063033716bc1461039357806306fdde03146103af5780631627540c146103c4575b600080fd5b61039c60175481565b6040519081526020015b60405180910390f35b6103b76108c0565b6040516103a69190614369565b6103d76103d23660046143ac565b61094e565b005b6103ec6103e73660046143c7565b610a74565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016103a6565b6103d761041f3660046143e0565b610aa1565b6006546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6104676104523660046143ac565b600a6020526000908152604090205460ff1681565b60405190151581526020016103a6565b61039c6104853660046143ac565b60126020526000908152604090205481565b61039c60195481565b61039c60145481565b61039c6104b73660046143ac565b60156020526000908152604090205481565b61039c601b5481565b6103b7610b52565b6103d76104e83660046143c7565b610b5f565b6004546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6103ec61051b3660046143c7565b610c8a565b6103d761052e3660046143ac565b610cc1565b61039c60135481565b6103d761054a3660046143c7565b610dab565b61039c61055d3660046143ac565b60186020526000908152604090205481565b6001546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b610597610eab565b6040805194855260208501939093529183015260608201526080016103a6565b6103d76105c53660046143e0565b61109e565b6103d76105d83660046143e0565b61114b565b6103d76105eb366004614402565b61124a565b6105f8611324565b6040516103a69190614428565b6103d7610613366004614459565b611623565b61039c601d5481565b6103d761062f366004614494565b6117d3565b6103d761194b565b610644611a96565b6040516103a691906144d4565b6005546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b61039c60165481565b6103d7610688366004614459565b611c3b565b6003546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6000546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6103d76106db3660046143ac565b611d57565b61039c6106ee3660046143ac565b61206d565b6103d76107013660046144fd565b61219d565b6103d7610714366004614534565b612517565b601c546107299063ffffffff1681565b60405163ffffffff90911681526020016103a6565b61075161074c366004614562565b612646565b6040516103a69291906145e9565b6010546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b61046761078d3660046143ac565b600b6020526000908152604090205460ff1681565b6103d76107b03660046143ac565b61276a565b60095461039c565b6103d76107cb3660046143c7565b612854565b6007546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6008546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6103d761081e3660046143c7565b6128fc565b6103d7610831366004614459565b6129fc565b61083e612ba7565b6040516103a6919061460c565b6103d76108593660046143c7565b612c16565b6103d761086c366004614459565b612d10565b61039c601a5481565b6103d7610888366004614666565b612ebb565b6103d761089b3660046146ca565b6130c1565b6002546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b600c80546108cd906147dc565b80601f01602080910402602001604051908101604052809291908181526020018280546108f9906147dc565b80156109465780601f1061091b57610100808354040283529160200191610946565b820191906000526020600020905b81548152906001019060200180831161092957829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b600d8160038110610a8457600080fd5b015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610ade575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b610b4e8282613303565b5050565b601180546108cd906147dc565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610b9c575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6003546040517ff537fe0e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063f537fe0e906024015b600060405180830381600087803b158015610c6f57600080fd5b505af1158015610c83573d6000803e3d6000fd5b5050505050565b60098181548110610c9a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610cfe575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610d64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610de8575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6003546040517f6a257ebc0000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff90911690636a257ebc90604401610c55565b6000806000806000610ebb611a96565b604081015160a082015161012083015161016084015192985090965094509250905060015b60095481101561109657600073ffffffffffffffffffffffffffffffffffffffff1660098281548110610f1557610f1561482f565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614801590610f8e5750600a600060098381548110610f5757610f5761482f565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff16155b156110845760008060008060098581548110610fac57610fac61482f565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cc1ce536040518163ffffffff1660e01b8152600401608060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611045919061485e565b9350935093509350838a61105991906148c3565b9950611065838a6148c3565b985061107182896148c3565b975061107d81886148c3565b9650505050505b8061108e816148db565b915050610ee0565b505090919293565b60005473ffffffffffffffffffffffffffffffffffffffff163314806110db575060085473ffffffffffffffffffffffffffffffffffffffff1633145b611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b610b4e8282613552565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611188575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6111ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b8160000361122057600254600354610b4e9173ffffffffffffffffffffffffffffffffffffffff90811691168361375a565b600454600554610b4e9173ffffffffffffffffffffffffffffffffffffffff90811691168361375a565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611287575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6112ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b601c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b61132c6141ac565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561139a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be9190614913565b81526003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190614913565b6020820152600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925273ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156114c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ea9190614913565b81600260200201526005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115849190614913565b60608201526006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156115f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161b9190614913565b608082015290565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611660575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6116c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054829060ff16611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601260205260408120805484929061178c9084906148c3565b9250508190555081601360008282546117a591906148c3565b90915550506003546117ce9073ffffffffffffffffffffffffffffffffffffffff16848461375a565b505050565b600354839073ffffffffffffffffffffffffffffffffffffffff80831691161480611818575060055473ffffffffffffffffffffffffffffffffffffffff8281169116145b8061183d575060065473ffffffffffffffffffffffffffffffffffffffff8281169116145b6118a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c69642063616e6f6e6963616c20746f6b656e00000000000000000060448201526064016109f1565b336000818152600b602052604090205460ff1661191c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b611928853330876138c3565b60006119338661206d565b9050611943338287876001613a59565b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146119f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e657273686970000000000000000000000060648201526084016109f1565b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b611a9e6141ca565b6000611aa8611324565b60208101518151919250611abb916148c3565b80835260135460208401819052611ad1916148c3565b604080840191909152606082015190820151611aed91906148c3565b6060830181905260165460808401819052611b07916148c3565b60a08301526007546005546040517f41976e0900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152620f42409291909116906341976e0990602401602060405180830381865afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190614913565b60a0840151611bb8919061492c565b611bc29190614969565b60c0830152608081015160e083018190526019546101008401819052611be7916148c3565b610120830152601b54611bfb90600a614ac6565b610120830151611c0b919061492c565b610140830181905260c08301516040840151611c2791906148c3565b611c3191906148c3565b6101608301525090565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611c78575060085473ffffffffffffffffffffffffffffffffffffffff1633145b611cde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b600054611d0390839073ffffffffffffffffffffffffffffffffffffffff168361375a565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b191015b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611d94575060085473ffffffffffffffffffffffffffffffffffffffff1633145b611dfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff8116611e77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5a65726f2061646472657373206465746563746564000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b602052604090205460ff161515600114611f0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f41646472657373206e6f6e6578697374616e740000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b600954811015612026578173ffffffffffffffffffffffffffffffffffffffff1660098281548110611f8b57611f8b61482f565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff160361201457600060098281548110611fc757611fc761482f565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612026565b8061201e816148db565b915050611f57565b5060405173ffffffffffffffffffffffffffffffffffffffff821681527fcfdb9256a3d90cc6d479617ca43d8c8d264a9f5fe7f480029c4d918862c46db490602001610a69565b60025460009073ffffffffffffffffffffffffffffffffffffffff838116911614806120b3575060035473ffffffffffffffffffffffffffffffffffffffff8381169116145b156120c057506000919050565b60045473ffffffffffffffffffffffffffffffffffffffff83811691161480612103575060055473ffffffffffffffffffffffffffffffffffffffff8381169116145b1561211057506001919050565b60065473ffffffffffffffffffffffffffffffffffffffff9081169083160361213b57506002919050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f676574546f6b656e547970653a20496e76616c696420746f6b656e000000000060448201526064016109f1565b60005473ffffffffffffffffffffffffffffffffffffffff163314806121da575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166122bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5a65726f2061646472657373206465746563746564000000000000000000000060448201526064016109f1565b80156123165773ffffffffffffffffffffffffffffffffffffffff82166000908152600a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055612394565b6000806000808573ffffffffffffffffffffffffffffffffffffffff16632cc1ce536040518163ffffffff1660e01b8152600401608060405180830381865afa158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b919061485e565b50505050505050505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615612424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c7265616479206578697374730000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600b6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556009805491820190557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016851790556012825280832083905560158252808320839055601882528083209290925590519182527faa5bd6bda335b0c74f281b4b10d444ed06cd74963d7d77daa9a274eb4a7b36399101611d4b565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612554575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6125ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b8215806125c75750826001145b806125d25750826002145b612638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420746f6b656e2074797065000000000000000000000000000060448201526064016109f1565b6117ce308484600185613a59565b6000805460609073ffffffffffffffffffffffffffffffffffffffff16331480612687575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6126ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6000808773ffffffffffffffffffffffffffffffffffffffff16878787604051612718929190614ad2565b60006040518083038185875af1925050503d8060008114612755576040519150601f19603f3d011682016040523d82523d6000602084013e61275a565b606091505b5090999098509650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314806127a7575060085473ffffffffffffffffffffffffffffffffffffffff1633145b61280d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612891575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6128f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b601d55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612939575060085473ffffffffffffffffffffffffffffffffffffffff1633145b61299f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6005546040517f6a257ebc0000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff90911690636a257ebc90604401610c55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612a39575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612a9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054829060ff16612b30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff831660009081526015602052604081208054849290612b659084906148c3565b925050819055508160166000828254612b7e91906148c3565b90915550506005546117ce9073ffffffffffffffffffffffffffffffffffffffff16848461375a565b60606009805480602002602001604051908101604052809291908181526020018280548015612c0c57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612be1575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612c53575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612cb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6005546040517ff537fe0e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063f537fe0e90602401610c55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612d4d575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612db3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054829060ff16612e44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff831660009081526018602052604081208054849290612e799084906148c3565b925050819055508160196000828254612e9291906148c3565b90915550506006546117ce9073ffffffffffffffffffffffffffffffffffffffff16848461375a565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612ef8575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b82600003612ff8576003546040517f0397845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906303978452906044015b600060405180830381600087803b158015612fdb57600080fd5b505af1158015612fef573d6000803e3d6000fd5b50505050505050565b8260010361305f576005546040517f0397845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905290911690630397845290604401612fc1565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420746f6b656e5f74797065000000000000000000000000000060448201526064016109f1565b60005473ffffffffffffffffffffffffffffffffffffffff163314806130fe575060085473ffffffffffffffffffffffffffffffffffffffff1633145b613164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff85161580159061319e575073ffffffffffffffffffffffffffffffffffffffff841615155b80156131bf575073ffffffffffffffffffffffffffffffffffffffff831615155b613225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642062726964676520616464726573730000000000000000000060448201526064016109f1565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff8088168252868116602083015285169181019190915261326890600d9060036141e9565b50601080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841617905580516132bc906011906020840190614266565b507f2416e445d0e4d663ba206f921f8fd828f602f9a2b047e891e48ad0db5bbbf2f285858585856040516132f4959493929190614ae2565b60405180910390a15050505050565b8160000361344b576002546003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015613386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133aa9190614b36565b506003546002546040517f9006a50f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101849052911690639006a50f906044015b6020604051808303816000875af1158015613427573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ce9190614913565b600480546005546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182169381019390935260248301849052169063095ea7b3906044016020604051808303816000875af11580156134c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ec9190614b36565b50600554600480546040517f9006a50f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216928101929092526024820184905290911690639006a50f90604401613408565b81600003613658576003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201819052602482018390529063095ea7b3906044016020604051808303816000875af11580156135d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f69190614b36565b506003546002546040517f280cf3ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063280cf3ed90604401613408565b6005546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201819052602482018390529063095ea7b3906044016020604051808303816000875af11580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f49190614b36565b50600554600480546040517f280cf3ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821692810192909252602482018490529091169063280cf3ed90604401613408565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916137f19190614b53565b6000604051808303816000865af19150503d806000811461382e576040519150601f19603f3d011682016040523d82523d6000602084013e613833565b606091505b509150915081801561385d57508051158061385d57508080602001905181019061385d9190614b36565b610c83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016109f1565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916139629190614b53565b6000604051808303816000865af19150503d806000811461399f576040519150601f19603f3d011682016040523d82523d6000602084013e6139a4565b606091505b50915091508180156139ce5750805115806139ce5750808060200190518101906139ce9190614b36565b611943576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c45440000000000000000000000000000000000000000000000000000000060648201526084016109f1565b8115613ade5783600003613a7d578015613a7857613a78600084613552565b613a96565b83600103613a96578015613a9657613a96600184613552565b601054309073ffffffffffffffffffffffffffffffffffffffff1615613ad1575060105473ffffffffffffffffffffffffffffffffffffffff165b613adc858286613d84565b505b83600003613bc65773ffffffffffffffffffffffffffffffffffffffff85166000908152601260205260409020548310613b3d5773ffffffffffffffffffffffffffffffffffffffff8516600090815260126020526040812055613b78565b73ffffffffffffffffffffffffffffffffffffffff851660009081526012602052604081208054859290613b72908490614b6f565b90915550505b6013548310613b8b576000601355613ba3565b8260136000828254613b9d9190614b6f565b90915550505b8115613bc1578260146000828254613bbb91906148c3565b90915550505b610c83565b83600103613ca35773ffffffffffffffffffffffffffffffffffffffff85166000908152601560205260409020548310613c255773ffffffffffffffffffffffffffffffffffffffff8516600090815260156020526040812055613c60565b73ffffffffffffffffffffffffffffffffffffffff851660009081526015602052604081208054859290613c5a908490614b6f565b90915550505b6016548310613c73576000601655613c8b565b8260166000828254613c859190614b6f565b90915550505b8115613bc1578260176000828254613bbb91906148c3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601860205260409020548310613cfa5773ffffffffffffffffffffffffffffffffffffffff8516600090815260186020526040812055613d35565b73ffffffffffffffffffffffffffffffffffffffff851660009081526018602052604081208054859290613d2f908490614b6f565b90915550505b6019548310613d48576000601955613d60565b8260196000828254613d5a9190614b6f565b90915550505b8115610c835782601a6000828254613d7891906148c3565b90915550505050505050565b82600003613ee85760025473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d8560038110613dbd57613dbd61482f565b015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015613e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e559190614b36565b50600d8360038110613e6957613e6961482f565b0154600254601c54601d546040517fa9bd122600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526024810186905263ffffffff909216604483015260648201526000608482015291169063a9bd12269060a401612fc1565b826001036140505760025473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d8560038110613f2157613f2161482f565b015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015613f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb99190614b36565b50600d8360038110613fcd57613fcd61482f565b015460048054601c54601d546040517fa9bd122600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416948101949094526024840186905263ffffffff90911660448401526064830152600060848301529091169063a9bd12269060a401612fc1565b60025473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d85600381106140815761408161482f565b015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af11580156140f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141199190614b36565b50600d836003811061412d5761412d61482f565b0154600654601c54601d546040517fa9bd122600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526024810186905263ffffffff909216604483015260648201526000608482015291169063a9bd12269060a401612fc1565b6040518060a001604052806005906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b8260038101928215614256579160200282015b8281111561425657825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906141fc565b506142629291506142da565b5090565b828054614272906147dc565b90600052602060002090601f0160209004810192826142945760008555614256565b82601f106142ad57805160ff1916838001178555614256565b82800160010185558215614256579182015b828111156142565782518255916020019190600101906142bf565b5b8082111561426257600081556001016142db565b60005b8381101561430a5781810151838201526020016142f2565b83811115614319576000848401525b50505050565b600081518084526143378160208601602086016142ef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061437c602083018461431f565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146143a757600080fd5b919050565b6000602082840312156143be57600080fd5b61437c82614383565b6000602082840312156143d957600080fd5b5035919050565b600080604083850312156143f357600080fd5b50508035926020909101359150565b60006020828403121561441457600080fd5b813563ffffffff8116811461437c57600080fd5b60a08101818360005b6005811015614450578151835260209283019290910190600101614431565b50505092915050565b6000806040838503121561446c57600080fd5b61447583614383565b946020939093013593505050565b801515811461449157600080fd5b50565b6000806000606084860312156144a957600080fd5b6144b284614383565b92506020840135915060408401356144c981614483565b809150509250925092565b6101808101818360005b600c8110156144505781518352602092830192909101906001016144de565b6000806040838503121561451057600080fd5b61451983614383565b9150602083013561452981614483565b809150509250929050565b60008060006060848603121561454957600080fd5b833592506020840135915060408401356144c981614483565b6000806000806060858703121561457857600080fd5b61458185614383565b935060208501359250604085013567ffffffffffffffff808211156145a557600080fd5b818701915087601f8301126145b957600080fd5b8135818111156145c857600080fd5b8860208285010111156145da57600080fd5b95989497505060200194505050565b8215158152604060208201526000614604604083018461431f565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561465a57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101614628565b50909695505050505050565b60008060006060848603121561467b57600080fd5b8335925061468b60208501614383565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080600060a086880312156146e257600080fd5b6146eb86614383565b94506146f960208701614383565b935061470760408701614383565b925061471560608701614383565b9150608086013567ffffffffffffffff8082111561473257600080fd5b818801915088601f83011261474657600080fd5b8135818111156147585761475861469b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561479e5761479e61469b565b816040528281528b60208487010111156147b757600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b600181811c908216806147f057607f821691505b602082108103614829577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000806000806080858703121561487457600080fd5b505082516020840151604085015160609095015191969095509092509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156148d6576148d6614894565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361490c5761490c614894565b5060010190565b60006020828403121561492557600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561496457614964614894565b500290565b60008261499f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b808511156149fd57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156149e3576149e3614894565b808516156149f057918102915b93841c93908002906149a9565b509250929050565b600082614a1457506001614ac0565b81614a2157506000614ac0565b8160018114614a375760028114614a4157614a5d565b6001915050614ac0565b60ff841115614a5257614a52614894565b50506001821b614ac0565b5060208310610133831016604e8410600b8410161715614a80575081810a614ac0565b614a8a83836149a4565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614abc57614abc614894565b0290505b92915050565b600061437c8383614a05565b8183823760009101908152919050565b600073ffffffffffffffffffffffffffffffffffffffff80881683528087166020840152808616604084015280851660608401525060a06080830152614b2b60a083018461431f565b979650505050505050565b600060208284031215614b4857600080fd5b815161437c81614483565b60008251614b658184602087016142ef565b9190910192915050565b600082821015614b8157614b81614894565b50039056fea264697066735822122065d0af0d3c8c0c5e9c268cbfcc5a6902376d87b95477c9231945fba55762037864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c806379ba5097116101de578063bda767ab1161010f578063dedb8840116100ad578063e697af7f1161007c578063e697af7f14610871578063e7735c7e1461087a578063e9967ee11461088d578063eb33e4a9146108a057600080fd5b8063dedb884014610823578063e05261ec14610836578063e23f23181461084b578063e2b4a4ec1461085e57600080fd5b8063d7e0ebb3116100e9578063d7e0ebb3146107bd578063da92c9e6146107d0578063dc6663c7146107f0578063ddfbbf2f1461081057600080fd5b8063bda767ab1461077f578063bdacb303146107a2578063cd71678e146107b557600080fd5b8063919e06ce1161017c578063b134b77011610156578063b134b77014610706578063b269681d14610719578063b61d27f61461073e578063b703ac271461075f57600080fd5b8063919e06ce146106cd57806393272baf146106e057806394582327146106f357600080fd5b80638872e567116101b85780638872e567146106715780638980f11f1461067a5780638d7732031461068d5780638da5cb5b146106ad57600080fd5b806379ba5097146106345780637e34026e1461063c578063837184fe1461065157600080fd5b8063477a3bd1116102c3578063555b616211610261578063640ff7a911610230578063640ff7a9146105f0578063655cfd6d1461060557806366d003ac146106185780637565673a1461062157600080fd5b8063555b61621461058f5780635eccfeba146105b75780636007b3c0146105ca5780636230469d146105dd57600080fd5b80634e8a0f671161029d5780634e8a0f671461053357806351aa64491461053c5780635242e71d1461054f57806353a47bb71461056f57600080fd5b8063477a3bd1146104ed57806349696b201461050d5780634c69c00f1461052057600080fd5b80633001f398116103305780633906f1811161030a5780633906f181146104a95780633ed4e55c146104c9578063408e63bf146104d257806344b7742c146104da57600080fd5b80633001f3981461047757806333f8486f146104975780633452ae2a146104a057600080fd5b806320db46841161036c57806320db4684146103d9578063228d0b68146104115780632621db2f146104245780632d9e6bfa1461044457600080fd5b8063033716bc1461039357806306fdde03146103af5780631627540c146103c4575b600080fd5b61039c60175481565b6040519081526020015b60405180910390f35b6103b76108c0565b6040516103a69190614369565b6103d76103d23660046143ac565b61094e565b005b6103ec6103e73660046143c7565b610a74565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016103a6565b6103d761041f3660046143e0565b610aa1565b6006546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6104676104523660046143ac565b600a6020526000908152604090205460ff1681565b60405190151581526020016103a6565b61039c6104853660046143ac565b60126020526000908152604090205481565b61039c60195481565b61039c60145481565b61039c6104b73660046143ac565b60156020526000908152604090205481565b61039c601b5481565b6103b7610b52565b6103d76104e83660046143c7565b610b5f565b6004546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6103ec61051b3660046143c7565b610c8a565b6103d761052e3660046143ac565b610cc1565b61039c60135481565b6103d761054a3660046143c7565b610dab565b61039c61055d3660046143ac565b60186020526000908152604090205481565b6001546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b610597610eab565b6040805194855260208501939093529183015260608201526080016103a6565b6103d76105c53660046143e0565b61109e565b6103d76105d83660046143e0565b61114b565b6103d76105eb366004614402565b61124a565b6105f8611324565b6040516103a69190614428565b6103d7610613366004614459565b611623565b61039c601d5481565b6103d761062f366004614494565b6117d3565b6103d761194b565b610644611a96565b6040516103a691906144d4565b6005546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b61039c60165481565b6103d7610688366004614459565b611c3b565b6003546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6000546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6103d76106db3660046143ac565b611d57565b61039c6106ee3660046143ac565b61206d565b6103d76107013660046144fd565b61219d565b6103d7610714366004614534565b612517565b601c546107299063ffffffff1681565b60405163ffffffff90911681526020016103a6565b61075161074c366004614562565b612646565b6040516103a69291906145e9565b6010546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b61046761078d3660046143ac565b600b6020526000908152604090205460ff1681565b6103d76107b03660046143ac565b61276a565b60095461039c565b6103d76107cb3660046143c7565b612854565b6007546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6008546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6103d761081e3660046143c7565b6128fc565b6103d7610831366004614459565b6129fc565b61083e612ba7565b6040516103a6919061460c565b6103d76108593660046143c7565b612c16565b6103d761086c366004614459565b612d10565b61039c601a5481565b6103d7610888366004614666565b612ebb565b6103d761089b3660046146ca565b6130c1565b6002546103ec9073ffffffffffffffffffffffffffffffffffffffff1681565b600c80546108cd906147dc565b80601f01602080910402602001604051908101604052809291908181526020018280546108f9906147dc565b80156109465780601f1061091b57610100808354040283529160200191610946565b820191906000526020600020905b81548152906001019060200180831161092957829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b600d8160038110610a8457600080fd5b015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610ade575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b610b4e8282613303565b5050565b601180546108cd906147dc565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610b9c575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6003546040517ff537fe0e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063f537fe0e906024015b600060405180830381600087803b158015610c6f57600080fd5b505af1158015610c83573d6000803e3d6000fd5b5050505050565b60098181548110610c9a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610cfe575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610d64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610de8575060085473ffffffffffffffffffffffffffffffffffffffff1633145b610e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6003546040517f6a257ebc0000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff90911690636a257ebc90604401610c55565b6000806000806000610ebb611a96565b604081015160a082015161012083015161016084015192985090965094509250905060015b60095481101561109657600073ffffffffffffffffffffffffffffffffffffffff1660098281548110610f1557610f1561482f565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614801590610f8e5750600a600060098381548110610f5757610f5761482f565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff16155b156110845760008060008060098581548110610fac57610fac61482f565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cc1ce536040518163ffffffff1660e01b8152600401608060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611045919061485e565b9350935093509350838a61105991906148c3565b9950611065838a6148c3565b985061107182896148c3565b975061107d81886148c3565b9650505050505b8061108e816148db565b915050610ee0565b505090919293565b60005473ffffffffffffffffffffffffffffffffffffffff163314806110db575060085473ffffffffffffffffffffffffffffffffffffffff1633145b611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b610b4e8282613552565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611188575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6111ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b8160000361122057600254600354610b4e9173ffffffffffffffffffffffffffffffffffffffff90811691168361375a565b600454600554610b4e9173ffffffffffffffffffffffffffffffffffffffff90811691168361375a565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611287575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6112ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b601c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b61132c6141ac565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561139a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be9190614913565b81526003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190614913565b6020820152600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925273ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156114c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ea9190614913565b81600260200201526005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115849190614913565b60608201526006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156115f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161b9190614913565b608082015290565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611660575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6116c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054829060ff16611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601260205260408120805484929061178c9084906148c3565b9250508190555081601360008282546117a591906148c3565b90915550506003546117ce9073ffffffffffffffffffffffffffffffffffffffff16848461375a565b505050565b600354839073ffffffffffffffffffffffffffffffffffffffff80831691161480611818575060055473ffffffffffffffffffffffffffffffffffffffff8281169116145b8061183d575060065473ffffffffffffffffffffffffffffffffffffffff8281169116145b6118a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c69642063616e6f6e6963616c20746f6b656e00000000000000000060448201526064016109f1565b336000818152600b602052604090205460ff1661191c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b611928853330876138c3565b60006119338661206d565b9050611943338287876001613a59565b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146119f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e657273686970000000000000000000000060648201526084016109f1565b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b611a9e6141ca565b6000611aa8611324565b60208101518151919250611abb916148c3565b80835260135460208401819052611ad1916148c3565b604080840191909152606082015190820151611aed91906148c3565b6060830181905260165460808401819052611b07916148c3565b60a08301526007546005546040517f41976e0900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152620f42409291909116906341976e0990602401602060405180830381865afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190614913565b60a0840151611bb8919061492c565b611bc29190614969565b60c0830152608081015160e083018190526019546101008401819052611be7916148c3565b610120830152601b54611bfb90600a614ac6565b610120830151611c0b919061492c565b610140830181905260c08301516040840151611c2791906148c3565b611c3191906148c3565b6101608301525090565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611c78575060085473ffffffffffffffffffffffffffffffffffffffff1633145b611cde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b600054611d0390839073ffffffffffffffffffffffffffffffffffffffff168361375a565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b191015b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611d94575060085473ffffffffffffffffffffffffffffffffffffffff1633145b611dfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff8116611e77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5a65726f2061646472657373206465746563746564000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b602052604090205460ff161515600114611f0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f41646472657373206e6f6e6578697374616e740000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b600954811015612026578173ffffffffffffffffffffffffffffffffffffffff1660098281548110611f8b57611f8b61482f565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff160361201457600060098281548110611fc757611fc761482f565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612026565b8061201e816148db565b915050611f57565b5060405173ffffffffffffffffffffffffffffffffffffffff821681527fcfdb9256a3d90cc6d479617ca43d8c8d264a9f5fe7f480029c4d918862c46db490602001610a69565b60025460009073ffffffffffffffffffffffffffffffffffffffff838116911614806120b3575060035473ffffffffffffffffffffffffffffffffffffffff8381169116145b156120c057506000919050565b60045473ffffffffffffffffffffffffffffffffffffffff83811691161480612103575060055473ffffffffffffffffffffffffffffffffffffffff8381169116145b1561211057506001919050565b60065473ffffffffffffffffffffffffffffffffffffffff9081169083160361213b57506002919050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f676574546f6b656e547970653a20496e76616c696420746f6b656e000000000060448201526064016109f1565b60005473ffffffffffffffffffffffffffffffffffffffff163314806121da575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166122bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5a65726f2061646472657373206465746563746564000000000000000000000060448201526064016109f1565b80156123165773ffffffffffffffffffffffffffffffffffffffff82166000908152600a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055612394565b6000806000808573ffffffffffffffffffffffffffffffffffffffff16632cc1ce536040518163ffffffff1660e01b8152600401608060405180830381865afa158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b919061485e565b50505050505050505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615612424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c7265616479206578697374730000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600b6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556009805491820190557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016851790556012825280832083905560158252808320839055601882528083209290925590519182527faa5bd6bda335b0c74f281b4b10d444ed06cd74963d7d77daa9a274eb4a7b36399101611d4b565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612554575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6125ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b8215806125c75750826001145b806125d25750826002145b612638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420746f6b656e2074797065000000000000000000000000000060448201526064016109f1565b6117ce308484600185613a59565b6000805460609073ffffffffffffffffffffffffffffffffffffffff16331480612687575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6126ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6000808773ffffffffffffffffffffffffffffffffffffffff16878787604051612718929190614ad2565b60006040518083038185875af1925050503d8060008114612755576040519150601f19603f3d011682016040523d82523d6000602084013e61275a565b606091505b5090999098509650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314806127a7575060085473ffffffffffffffffffffffffffffffffffffffff1633145b61280d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612891575060085473ffffffffffffffffffffffffffffffffffffffff1633145b6128f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b601d55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612939575060085473ffffffffffffffffffffffffffffffffffffffff1633145b61299f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6005546040517f6a257ebc0000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff90911690636a257ebc90604401610c55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612a39575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612a9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054829060ff16612b30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff831660009081526015602052604081208054849290612b659084906148c3565b925050819055508160166000828254612b7e91906148c3565b90915550506005546117ce9073ffffffffffffffffffffffffffffffffffffffff16848461375a565b60606009805480602002602001604051908101604052809291908181526020018280548015612c0c57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612be1575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612c53575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612cb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b6005546040517ff537fe0e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063f537fe0e90602401610c55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612d4d575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612db3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054829060ff16612e44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420414d4f00000000000000000000000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff831660009081526018602052604081208054849290612e799084906148c3565b925050819055508160196000828254612e9291906148c3565b90915550506006546117ce9073ffffffffffffffffffffffffffffffffffffffff16848461375a565b60005473ffffffffffffffffffffffffffffffffffffffff16331480612ef8575060085473ffffffffffffffffffffffffffffffffffffffff1633145b612f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b82600003612ff8576003546040517f0397845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906303978452906044015b600060405180830381600087803b158015612fdb57600080fd5b505af1158015612fef573d6000803e3d6000fd5b50505050505050565b8260010361305f576005546040517f0397845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905290911690630397845290604401612fc1565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420746f6b656e5f74797065000000000000000000000000000060448201526064016109f1565b60005473ffffffffffffffffffffffffffffffffffffffff163314806130fe575060085473ffffffffffffffffffffffffffffffffffffffff1633145b613164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109f1565b73ffffffffffffffffffffffffffffffffffffffff85161580159061319e575073ffffffffffffffffffffffffffffffffffffffff841615155b80156131bf575073ffffffffffffffffffffffffffffffffffffffff831615155b613225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642062726964676520616464726573730000000000000000000060448201526064016109f1565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff8088168252868116602083015285169181019190915261326890600d9060036141e9565b50601080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841617905580516132bc906011906020840190614266565b507f2416e445d0e4d663ba206f921f8fd828f602f9a2b047e891e48ad0db5bbbf2f285858585856040516132f4959493929190614ae2565b60405180910390a15050505050565b8160000361344b576002546003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015613386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133aa9190614b36565b506003546002546040517f9006a50f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101849052911690639006a50f906044015b6020604051808303816000875af1158015613427573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ce9190614913565b600480546005546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182169381019390935260248301849052169063095ea7b3906044016020604051808303816000875af11580156134c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ec9190614b36565b50600554600480546040517f9006a50f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216928101929092526024820184905290911690639006a50f90604401613408565b81600003613658576003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201819052602482018390529063095ea7b3906044016020604051808303816000875af11580156135d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f69190614b36565b506003546002546040517f280cf3ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063280cf3ed90604401613408565b6005546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201819052602482018390529063095ea7b3906044016020604051808303816000875af11580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f49190614b36565b50600554600480546040517f280cf3ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821692810192909252602482018490529091169063280cf3ed90604401613408565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916137f19190614b53565b6000604051808303816000865af19150503d806000811461382e576040519150601f19603f3d011682016040523d82523d6000602084013e613833565b606091505b509150915081801561385d57508051158061385d57508080602001905181019061385d9190614b36565b610c83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016109f1565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916139629190614b53565b6000604051808303816000865af19150503d806000811461399f576040519150601f19603f3d011682016040523d82523d6000602084013e6139a4565b606091505b50915091508180156139ce5750805115806139ce5750808060200190518101906139ce9190614b36565b611943576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c45440000000000000000000000000000000000000000000000000000000060648201526084016109f1565b8115613ade5783600003613a7d578015613a7857613a78600084613552565b613a96565b83600103613a96578015613a9657613a96600184613552565b601054309073ffffffffffffffffffffffffffffffffffffffff1615613ad1575060105473ffffffffffffffffffffffffffffffffffffffff165b613adc858286613d84565b505b83600003613bc65773ffffffffffffffffffffffffffffffffffffffff85166000908152601260205260409020548310613b3d5773ffffffffffffffffffffffffffffffffffffffff8516600090815260126020526040812055613b78565b73ffffffffffffffffffffffffffffffffffffffff851660009081526012602052604081208054859290613b72908490614b6f565b90915550505b6013548310613b8b576000601355613ba3565b8260136000828254613b9d9190614b6f565b90915550505b8115613bc1578260146000828254613bbb91906148c3565b90915550505b610c83565b83600103613ca35773ffffffffffffffffffffffffffffffffffffffff85166000908152601560205260409020548310613c255773ffffffffffffffffffffffffffffffffffffffff8516600090815260156020526040812055613c60565b73ffffffffffffffffffffffffffffffffffffffff851660009081526015602052604081208054859290613c5a908490614b6f565b90915550505b6016548310613c73576000601655613c8b565b8260166000828254613c859190614b6f565b90915550505b8115613bc1578260176000828254613bbb91906148c3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601860205260409020548310613cfa5773ffffffffffffffffffffffffffffffffffffffff8516600090815260186020526040812055613d35565b73ffffffffffffffffffffffffffffffffffffffff851660009081526018602052604081208054859290613d2f908490614b6f565b90915550505b6019548310613d48576000601955613d60565b8260196000828254613d5a9190614b6f565b90915550505b8115610c835782601a6000828254613d7891906148c3565b90915550505050505050565b82600003613ee85760025473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d8560038110613dbd57613dbd61482f565b015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015613e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e559190614b36565b50600d8360038110613e6957613e6961482f565b0154600254601c54601d546040517fa9bd122600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526024810186905263ffffffff909216604483015260648201526000608482015291169063a9bd12269060a401612fc1565b826001036140505760025473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d8560038110613f2157613f2161482f565b015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015613f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb99190614b36565b50600d8360038110613fcd57613fcd61482f565b015460048054601c54601d546040517fa9bd122600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416948101949094526024840186905263ffffffff90911660448401526064830152600060848301529091169063a9bd12269060a401612fc1565b60025473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d85600381106140815761408161482f565b015460405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af11580156140f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141199190614b36565b50600d836003811061412d5761412d61482f565b0154600654601c54601d546040517fa9bd122600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526024810186905263ffffffff909216604483015260648201526000608482015291169063a9bd12269060a401612fc1565b6040518060a001604052806005906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b8260038101928215614256579160200282015b8281111561425657825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906141fc565b506142629291506142da565b5090565b828054614272906147dc565b90600052602060002090601f0160209004810192826142945760008555614256565b82601f106142ad57805160ff1916838001178555614256565b82800160010185558215614256579182015b828111156142565782518255916020019190600101906142bf565b5b8082111561426257600081556001016142db565b60005b8381101561430a5781810151838201526020016142f2565b83811115614319576000848401525b50505050565b600081518084526143378160208601602086016142ef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061437c602083018461431f565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146143a757600080fd5b919050565b6000602082840312156143be57600080fd5b61437c82614383565b6000602082840312156143d957600080fd5b5035919050565b600080604083850312156143f357600080fd5b50508035926020909101359150565b60006020828403121561441457600080fd5b813563ffffffff8116811461437c57600080fd5b60a08101818360005b6005811015614450578151835260209283019290910190600101614431565b50505092915050565b6000806040838503121561446c57600080fd5b61447583614383565b946020939093013593505050565b801515811461449157600080fd5b50565b6000806000606084860312156144a957600080fd5b6144b284614383565b92506020840135915060408401356144c981614483565b809150509250925092565b6101808101818360005b600c8110156144505781518352602092830192909101906001016144de565b6000806040838503121561451057600080fd5b61451983614383565b9150602083013561452981614483565b809150509250929050565b60008060006060848603121561454957600080fd5b833592506020840135915060408401356144c981614483565b6000806000806060858703121561457857600080fd5b61458185614383565b935060208501359250604085013567ffffffffffffffff808211156145a557600080fd5b818701915087601f8301126145b957600080fd5b8135818111156145c857600080fd5b8860208285010111156145da57600080fd5b95989497505060200194505050565b8215158152604060208201526000614604604083018461431f565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561465a57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101614628565b50909695505050505050565b60008060006060848603121561467b57600080fd5b8335925061468b60208501614383565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080600060a086880312156146e257600080fd5b6146eb86614383565b94506146f960208701614383565b935061470760408701614383565b925061471560608701614383565b9150608086013567ffffffffffffffff8082111561473257600080fd5b818801915088601f83011261474657600080fd5b8135818111156147585761475861469b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561479e5761479e61469b565b816040528281528b60208487010111156147b757600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b600181811c908216806147f057607f821691505b602082108103614829577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000806000806080858703121561487457600080fd5b505082516020840151604085015160609095015191969095509092509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156148d6576148d6614894565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361490c5761490c614894565b5060010190565b60006020828403121561492557600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561496457614964614894565b500290565b60008261499f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b808511156149fd57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156149e3576149e3614894565b808516156149f057918102915b93841c93908002906149a9565b509250929050565b600082614a1457506001614ac0565b81614a2157506000614ac0565b8160018114614a375760028114614a4157614a5d565b6001915050614ac0565b60ff841115614a5257614a52614894565b50506001821b614ac0565b5060208310610133831016604e8410600b8410161715614a80575081810a614ac0565b614a8a83836149a4565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614abc57614abc614894565b0290505b92915050565b600061437c8383614a05565b8183823760009101908152919050565b600073ffffffffffffffffffffffffffffffffffffffff80881683528087166020840152808616604084015280851660608401525060a06080830152614b2b60a083018461431f565b979650505050505050565b600060208284031215614b4857600080fd5b815161437c81614483565b60008251614b658184602087016142ef565b9190910192915050565b600082821015614b8157614b81614894565b50039056fea264697066735822122065d0af0d3c8c0c5e9c268cbfcc5a6902376d87b95477c9231945fba55762037864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2539,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2541,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8589,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "anyFRAX",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAnyswapV4ERC20)526"
      },
      {
        "astId": 8592,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "canFRAX",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(CrossChainCanonical)3610"
      },
      {
        "astId": 8595,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "anyFXS",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAnyswapV4ERC20)526"
      },
      {
        "astId": 8598,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "canFXS",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(CrossChainCanonical)3610"
      },
      {
        "astId": 8601,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "collateral_token",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ERC20)1627"
      },
      {
        "astId": 8604,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "cross_chain_oracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICrossChainOracle)8568"
      },
      {
        "astId": 8606,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "timelock_address",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8609,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "amos_array",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8613,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "eoa_amos",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8617,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "amos",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8619,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "name",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 8626,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "bridge_addresses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)3_storage"
      },
      {
        "astId": 8628,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "destination_address_override",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 8630,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "non_evm_destination_address",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 8634,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "frax_lent_balances",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8637,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "frax_lent_sum",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 8640,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "frax_bridged_back_sum",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 8644,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "fxs_lent_balances",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8647,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "fxs_lent_sum",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 8650,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "fxs_bridged_back_sum",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 8654,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "collat_lent_balances",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8657,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "collat_lent_sum",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 8660,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "collat_bridged_back_sum",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 8662,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "missing_decimals",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 10405,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "destination",
        "offset": 0,
        "slot": "28",
        "type": "t_uint32"
      },
      {
        "astId": 10407,
        "contract": "contracts/CrossChainBridgeBacker_EVMOS_Nomad.sol:CrossChainBridgeBacker_EVMOS_Nomad",
        "label": "recipient",
        "offset": 0,
        "slot": "29",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CrossChainCanonical)3610": {
        "encoding": "inplace",
        "label": "contract CrossChainCanonical",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)1627": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IAnyswapV4ERC20)526": {
        "encoding": "inplace",
        "label": "contract IAnyswapV4ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ICrossChainOracle)8568": {
        "encoding": "inplace",
        "label": "contract ICrossChainOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}